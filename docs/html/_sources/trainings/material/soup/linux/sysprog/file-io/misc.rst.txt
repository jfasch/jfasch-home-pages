.. ot-topic:: linux.sysprog.fileio.misc
   :dependencies: linux.sysprog.fileio.basics

.. include:: <mmlalias.txt>


Miscellaneous
=============

.. contents::
   :local:

I/O without Offset Manipulation
-------------------------------

.. sidebar:: Documentation

   * `man -s 2 pread
     <https://man7.org/linux/man-pages/man2/pwrite.2.html>`__

.. code-block:: c

   #include <unistd.h>

   ssize_t pread(int fd, void *buf, size_t count, off_t offset);
   ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);

* ``read()`` and ``write()`` have been made for *sequential* access
* Random access only together with ``lseek()``
* Inefficient
* Not *atomic* |longrightarrow| race conditions!

Scatter/Gather I/O
------------------

.. sidebar:: Documentation

   * `man -s 2 pread
     <https://man7.org/linux/man-pages/man2/pwrite.2.html>`__

.. code-block:: c

   #include <unistd.h>

   ssize_t pread(int fd, void *buf, size_t count, off_t offset);
   ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);


.. ..   \begin{itemize}
.. ..   \item Often data are not present in one contiguous block
.. ..     \begin{itemize}
.. ..       \item E.g. layered protocols
.. ..     \end{itemize}
.. ..   \item $\to$ Copy pieces together, or issue repeated small system
.. ..     calls
.. ..   \item $\to$ Scatter/Gather I/O
.. ..   \end{itemize}
.. .. 
.. ..   \begin{block}{\texttt{man 2 readv}}
.. .. \begin{verbatim}
.. .. ssize_t readv(int fd,
.. ..     const struct iovec *iov, int iovcnt);
.. .. ssize_t writev(int fd,
.. ..     const struct iovec *iov, int iovcnt);
.. .. \end{verbatim}
.. ..   \end{block}
.. .. 
.. .. \end{frame}
.. .. 
.. .. % --------------------------------------------------------------------
.. .. \begin{frame}[fragile]
.. ..   \frametitle{Scatter/Gather I/O, without Offset Manipulation}
.. .. 
.. ..   Wortlos ...
.. .. 
.. ..   \begin{block}{\texttt{man 2 preadv}}
.. .. \begin{verbatim}
.. .. ssize_t preadv(int fd,
.. ..     const struct iovec *iov, int iovcnt,
.. ..     off_t offset);
.. .. ssize_t pwritev(int fd,
.. ..     const struct iovec *iov, int iovcnt,
.. ..     off_t offset);
.. .. \end{verbatim}
.. ..   \end{block}
.. .. 
.. ..   \alert{Attention: Linux specific}
.. .. 
.. .. \end{frame}
.. .. 
.. .. % --------------------------------------------------------------------
.. .. \begin{frame}[fragile]
.. ..   \frametitle{Truncating Files}
.. .. 
.. ..   \begin{itemize}
.. ..   \item Truncating a file ...
.. ..   \item ... or create a hole ($\sim$ \texttt{lseek()})
.. ..   \end{itemize}
.. .. 
.. ..   \begin{block}{\texttt{man 2 truncate}}
.. .. \begin{verbatim}
.. .. int truncate(const char *path, off_t length);
.. .. int ftruncate(int fd, off_t length);
.. .. \end{verbatim}
.. ..   \end{block}
.. .. 
.. .. \end{frame}
.. .. 
.. .. % --------------------------------------------------------------------
.. .. \begin{frame}[fragile]
.. ..   \frametitle{File Descriptors - Allocation}
.. .. 
.. ..   Value of the next file descriptors is not arbitrarily chosen $\to$
.. ..   next free slot, starting at 0.
.. .. 
.. ..   \begin{block}{Filedescriptor Selection}
.. .. \begin{verbatim}
.. .. close(STDIN_FILENO);
.. .. int fd = open("/dev/null", O_WRONLY);
.. .. assert(fd == 0);
.. .. \end{verbatim}
.. ..   \end{block}
.. .. 
.. .. \end{frame}
.. .. 
.. .. 
