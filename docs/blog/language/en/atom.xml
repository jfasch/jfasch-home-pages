<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://www.faschingbauer.me</id>
  <title>Jörg Faschingbauer - Posts in en</title>
  <updated>2024-10-10T08:14:41.966104+00:00</updated>
  <link href="https://www.faschingbauer.me"/>
  <link href="https://www.faschingbauer.me/blog/language/en/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.6">ABlog</generator>
  <entry>
    <id>https://www.faschingbauer.me/blog/2022/09/cross-raspi.html</id>
    <title>Building A Cross Toolchain For The Raspberry Pi, Using crosstool-ng</title>
    <updated>2022-09-23T00:00:00+02:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="building-a-cross-toolchain-for-the-raspberry-pi-using-crosstool-ng"&gt;

&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#why-this-article-why-not-use-a-prebuilt-toolchain" id="id13"&gt;Why This Article? Why Not Use A Prebuilt Toolchain?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#installing-crosstool-ng" id="id14"&gt;Installing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crosstool-ng&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prerequisites" id="id15"&gt;Prerequisites&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#installing-from-cloned-git-repository" id="id16"&gt;Installing From Cloned Git Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#installing-from-release-tarball" id="id17"&gt;Installing From Release Tarball&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#path-and-basic-test" id="id18"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt;, And Basic Test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-toolchain-build" id="id19"&gt;Configure Toolchain Build&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#base-configuration-for-the-raspberry" id="id20"&gt;Base Configuration For The Raspberry&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#important-glibc-version" id="id21"&gt;Important: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; Version&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#the-error" id="id22"&gt;The Error&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#the-fix" id="id23"&gt;The Fix&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#important-gcc-version" id="id24"&gt;Important: GCC Version&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id25"&gt;The Error&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id26"&gt;The Fix&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#toolchain-build-install" id="id27"&gt;Toolchain Build/Install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#test" id="id28"&gt;Test&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#simplest-c-stdio-h" id="id29"&gt;Simplest: C, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#c-iostream" id="id30"&gt;C++, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#c-thread" id="id31"&gt;C++, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#packaging-distributing-the-toolchain" id="id32"&gt;Packaging/Distributing The Toolchain&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#afterword" id="id33"&gt;Afterword&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="why-this-article-why-not-use-a-prebuilt-toolchain"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13" role="doc-backlink"&gt;Why This Article? Why Not Use A Prebuilt Toolchain?&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There &lt;a class="reference external" href="https://github.com/raspberrypi/tools"&gt;used to be&lt;/a&gt; a
toolchain for the Raspberry Pi, made by the &lt;a class="reference external" href="https://www.raspberrypi.com/software/"&gt;Raspberry Pi OS&lt;/a&gt; creators. Sadly, this
repository has been dead since years.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One popular toolchain, &lt;a class="reference external" href="https://snapshots.linaro.org/gnu-toolchain/"&gt;Linaro&lt;/a&gt;, is widely
recommended for the Raspberry. It does not work for C++ though - its
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libstdc++&lt;/span&gt;&lt;/code&gt; has an unsatisfied version dependency on
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libpthread&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A number of other Raspberry toolchains exist out there, but I either
didn’t get them to work at all (see the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; &lt;a class="reference internal" href="../2022/09/cross-raspi.html#glibc-version"&gt;&lt;span class="std std-ref"&gt;version
dependency&lt;/span&gt;&lt;/a&gt;), or didn’t get them to work for C++.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prebuilt toolchains may work for C, but I failed to find one that
works for C++. The amount of work that I invested in finding one was,
in my opinion, totally wasted. Building a toolchain yourself is not at
all hard, provided that you bring basic Linux understanding (which you
should if you program for it).&lt;/p&gt;
&lt;p&gt;In my opinion (please given me &lt;a class="reference internal" href="../../about/myself/index.html"&gt;&lt;span class="doc"&gt;feedback&lt;/span&gt;&lt;/a&gt;), this article describes the most
close-to-correct way to build a toolchain for a target that does not
come with a toolchain. Although I describe the situation for the
Raspberry (because that was my primary intention), it will sure work
for &lt;em&gt;any&lt;/em&gt; target.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="installing-crosstool-ng"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14" role="doc-backlink"&gt;Installing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crosstool-ng&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a writeup of how I installed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crosstool-ng&lt;/span&gt;&lt;/code&gt; (running
Fedora, I chose to install from a released tarball) . Please read
through their &lt;a class="reference external" href="https://crosstool-ng.github.io/docs/install/"&gt;installation documentation&lt;/a&gt; for your particular
situation.&lt;/p&gt;
&lt;section id="prerequisites"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15" role="doc-backlink"&gt;Prerequisites&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crosstool-ng&lt;/span&gt;&lt;/code&gt; requires one to install a number of packages
first. Thankfully, they do thorough testing in Docker, and the list of
dependencies can be taken from the Docker file for your OS (see &lt;a class="reference external" href="https://github.com/crosstool-ng/crosstool-ng/tree/master/testing/docker"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id7"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;Dependencies for Fedora&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;root@host # &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;autoconf&lt;span class="w"&gt; &lt;/span&gt;gperf&lt;span class="w"&gt; &lt;/span&gt;bison&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;flex&lt;span class="w"&gt; &lt;/span&gt;texinfo&lt;span class="w"&gt; &lt;/span&gt;help2man&lt;span class="w"&gt; &lt;/span&gt;gcc-c++&lt;span class="w"&gt; &lt;/span&gt;libtool&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ncurses-devel&lt;span class="w"&gt; &lt;/span&gt;python3-devel&lt;span class="w"&gt; &lt;/span&gt;perl-Thread-Queue&lt;span class="w"&gt; &lt;/span&gt;bzip2&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;xz&lt;span class="w"&gt; &lt;/span&gt;unzip&lt;span class="w"&gt; &lt;/span&gt;rsync&lt;span class="w"&gt; &lt;/span&gt;diffutils&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;meson&lt;span class="w"&gt; &lt;/span&gt;ninja-build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="literal-block-wrapper docutils container" id="id8"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;Dependencies for Ubuntu&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;root@host # &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;g++&lt;span class="w"&gt; &lt;/span&gt;gperf&lt;span class="w"&gt; &lt;/span&gt;bison&lt;span class="w"&gt; &lt;/span&gt;flex&lt;span class="w"&gt; &lt;/span&gt;texinfo&lt;span class="w"&gt; &lt;/span&gt;help2man&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;libncurses5-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;python3-dev&lt;span class="w"&gt; &lt;/span&gt;autoconf&lt;span class="w"&gt; &lt;/span&gt;automake&lt;span class="w"&gt; &lt;/span&gt;libtool&lt;span class="w"&gt; &lt;/span&gt;libtool-bin&lt;span class="w"&gt; &lt;/span&gt;gawk&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;bzip2&lt;span class="w"&gt; &lt;/span&gt;xz-utils&lt;span class="w"&gt; &lt;/span&gt;unzip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;libstdc++6&lt;span class="w"&gt; &lt;/span&gt;rsync&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;meson&lt;span class="w"&gt; &lt;/span&gt;ninja-build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="installing-from-cloned-git-repository"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16" role="doc-backlink"&gt;Installing From Cloned Git Repository&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;At one point, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt;&lt;/code&gt; (as installed from the release tarball)
failed to build toolchains because it tried to download a version
of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zlib&lt;/span&gt;&lt;/code&gt; that did not exist anymore:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[EXTRA]    Retrieving &amp;#39;zlib-1.2.12&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;[ERROR]    zlib: download failed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The issue had already been resolved in the upstream repository, but
no tarball release had been made. So building &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crosstool-ng&lt;/span&gt;&lt;/code&gt; from
source is in order.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The steps are basically the same as installing from the release
tarball, except that some massaging (yes, autotools) in the source
directory is necessary prior to building.&lt;/p&gt;
&lt;p&gt;Clone repository, and massage source tree:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/crosstool-ng/crosstool-ng
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;crosstool-ng/
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;sh&lt;span class="w"&gt; &lt;/span&gt;./bootstrap
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;./configure&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;/home/jfasch/cross
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;make
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="installing-from-release-tarball"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17" role="doc-backlink"&gt;Installing From Release Tarball&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As complained above, releases might be out of date. Anyway, the
procedure is slightly simpler that building from the upstream repo
source. Download latest release &lt;a class="reference external" href="https://crosstool-ng.github.io/download/"&gt;here&lt;/a&gt;); current version as of
this writing is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.25.0&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host$ &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.25.0.tar.xz
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;xf&lt;span class="w"&gt; &lt;/span&gt;crosstool-ng-1.25.0.tar.xz
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;crosstool-ng-1.25.0/
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;./configure&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;/home/jfasch/cross
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;make
&lt;span class="gp"&gt;me@host$ &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="path-and-basic-test"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18" role="doc-backlink"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt;, And Basic Test&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id9"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;You may want to add this to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;me@host$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/cross/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Test if all is well,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host$ &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="go"&gt;This is crosstool-NG version 1.25.0&lt;/span&gt;

&lt;span class="go"&gt;Copyright (C) 2008  Yann E. MORIN &amp;lt;yann.morin.1998@free.fr&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;This is free software; see the source for copying conditions.&lt;/span&gt;
&lt;span class="go"&gt;There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A&lt;/span&gt;
&lt;span class="go"&gt;PARTICULAR PURPOSE.&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="configure-toolchain-build"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19" role="doc-backlink"&gt;Configure Toolchain Build&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt;&lt;/code&gt; toolchain build configuration works a lot like the Linux
kernel’s configuration system (a little less elaborate though). There
are a number of base configurations to choose from (we need a
Raspberry config), and, having chosen one, you can tune it to your
needs.&lt;/p&gt;
&lt;section id="base-configuration-for-the-raspberry"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20" role="doc-backlink"&gt;Base Configuration For The Raspberry&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host$ &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;list-samples&lt;span class="p"&gt;|&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;rpi
&lt;span class="go"&gt;[G...]   aarch64-rpi3-linux-gnu&lt;/span&gt;
&lt;span class="go"&gt;[G...]   aarch64-rpi4-linux-gnu&lt;/span&gt;
&lt;span class="go"&gt;[G...]   armv7-rpi2-linux-gnueabihf&lt;/span&gt;
&lt;span class="go"&gt;[G...]   armv8-rpi3-linux-gnueabihf&lt;/span&gt;
&lt;span class="go"&gt;[G...]   armv8-rpi4-linux-gnueabihf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mine is a Pi 4, still running the (still default) 32 bit version, so I
create a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.config&lt;/span&gt;&lt;/code&gt; file for that,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;armv8-rpi4-linux-gnueabihf
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;.config
&lt;span class="go"&gt;-rw-r--r--. 1 jfasch jfasch 23179 Sep 23 08:18 .config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="important-glibc-version"&gt;
&lt;span id="glibc-version"&gt;&lt;/span&gt;&lt;h3&gt;&lt;a class="toc-backref" href="#id21" role="doc-backlink"&gt;Important: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; Version&lt;/a&gt;&lt;/h3&gt;
&lt;section id="the-error"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id22" role="doc-backlink"&gt;The Error&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Executables built by your toolchain won’t work if the toolchain links
against a C library whose version is higher than what is present on
the target. Continuing with the above default configuration, and just
saying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt; &lt;span class="pre"&gt;build&lt;/span&gt;&lt;/code&gt; will likely result in an error
&lt;a class="footnote-reference brackets" href="#glibc-default-version" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A minimal &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt; &lt;span class="pre"&gt;main()&lt;/span&gt; &lt;span class="pre"&gt;{&lt;/span&gt; &lt;span class="pre"&gt;return&lt;/span&gt; &lt;span class="pre"&gt;0;&lt;/span&gt; &lt;span class="pre"&gt;}&lt;/span&gt;&lt;/code&gt; program, compiled for the
target, will complain:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@target $ &lt;/span&gt;./a.out
&lt;span class="go"&gt;./a.out: /lib/arm-linux-gnueabihf/libc.so.6: version `GLIBC_2.34&amp;#39; not found (required by ./a.out)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Background is that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; employs &lt;a class="reference external" href="https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA.junk/symversion.html"&gt;ELF symbol versioning&lt;/a&gt;
a lot. Key point is that an executable which links against version,
say, &lt;cite&gt;2.34&lt;/cite&gt; (which is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt;&lt;/code&gt; default), will require the symbol
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GLIBC_2.34&lt;/span&gt;&lt;/code&gt; in the C library, and fail to load if the target
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; version is, say, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.28&lt;/span&gt;&lt;/code&gt; &lt;a class="footnote-reference brackets" href="#my-situation" id="id3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. That version
obviously cannot have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GLIBC_2.34&lt;/span&gt;&lt;/code&gt;, so the executable cannot load.&lt;/p&gt;
&lt;p&gt;Find out location of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@target $ &lt;/span&gt;ldd&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/ls
&lt;span class="go"&gt;        ...&lt;/span&gt;
&lt;span class="go"&gt;        libc.so.6 =&amp;gt; /lib/arm-linux-gnueabihf/libc.so.6 (0xb6e06000)&lt;/span&gt;
&lt;span class="go"&gt;        ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Simply &lt;em&gt;invoke&lt;/em&gt; (sic!) the library,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@target $ &lt;/span&gt;/lib/arm-linux-gnueabihf/libc.so.6
&lt;span class="go"&gt;GNU C Library (Debian GLIBC 2.28-10+rpt2+rpi1+deb10u1) stable release version 2.28.&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="the-fix"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id23" role="doc-backlink"&gt;The Fix&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, it’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.28&lt;/span&gt;&lt;/code&gt;. Back on the &lt;em&gt;host&lt;/em&gt; again, tune configuration:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;menuconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C-library&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Version&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt;, choose &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.28&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="blog/2022/09/glibc-version.png" src="blog/2022/09/glibc-version.png" style="width: 477.0px; height: 255.5px;" /&gt;
&lt;p&gt;Minor quirk: version &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.28&lt;/span&gt;&lt;/code&gt; does not build without warnings, so one
has to disable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-Werror&lt;/span&gt;&lt;/code&gt; during its build,&lt;/p&gt;
&lt;img alt="blog/2022/09/werror.png" src="blog/2022/09/werror.png" style="width: 477.0px; height: 255.5px;" /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="important-gcc-version"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24" role="doc-backlink"&gt;Important: GCC Version&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not only is the Pi’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; version rather outdated; GCC is also a
bit behind - it’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;8.3.0&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;section id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id25" role="doc-backlink"&gt;The Error&lt;/a&gt;&lt;/h4&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/jfasch/My-Projects/jfasch-home/blog/2022/09/cross-raspi.rst&lt;/span&gt;, line 256); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “the error”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Using the latest supported GCC version (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;12.2.0&lt;/span&gt;&lt;/code&gt; as of this writing)
as a cross compiler, A less trivial C++ program fails to start:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;./a.out: /lib/arm-linux-gnueabihf/libstdc++.so.6: version `GLIBCXX_3.4.29&amp;#39; not found (required by ./a.out)&lt;/span&gt;
&lt;span class="go"&gt;./a.out: /lib/arm-linux-gnueabihf/libstdc++.so.6: version `GLIBCXX_3.4.26&amp;#39; not found (required by ./a.out)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It turns out that the program makes use of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;std::filesystem&lt;/span&gt;&lt;/code&gt;
library that has been added in C++17. Apparently that library uses
some more modern functionality from GCC’s C++ support library,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libgcc_s.so.1&lt;/span&gt;&lt;/code&gt;. That functionality is obviously not contained in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libgcc_s.so.1&lt;/span&gt;&lt;/code&gt; as of GCC &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;8.3.0&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id26" role="doc-backlink"&gt;The Fix&lt;/a&gt;&lt;/h4&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/jfasch/My-Projects/jfasch-home/blog/2022/09/cross-raspi.rst&lt;/span&gt;, line 273); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “the fix”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Downgrade the toolchain’s GCC to something like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;8.3.0&lt;/span&gt;&lt;/code&gt; (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;8.5.0&lt;/span&gt;&lt;/code&gt;
is just a minor release, so it should work).&lt;/p&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C&lt;/span&gt; &lt;span class="pre"&gt;compiler&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Version&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;gcc&lt;/span&gt;&lt;/code&gt;, choose &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;8.5.0&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;img alt="blog/2022/09/gcc-version.png" src="blog/2022/09/gcc-version.png" style="width: 400.5px; height: 264.5px;" /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="toolchain-build-install"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27" role="doc-backlink"&gt;Toolchain Build/Install&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is as simple as saying,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By default &lt;a class="footnote-reference brackets" href="#ct-prefix" id="id6" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, the toolchain is installed in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/x-tools/armv8-rpi4-linux-gnueabihf/&lt;/span&gt;&lt;/code&gt; (you may want to add
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/x-tools/armv8-rpi4-linux-gnueabihf/bin/&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$PATH&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For build system configuration (see for example
&lt;a class="reference internal" href="../../trainings/material/soup/linux/toolchain/cmake/cross.html"&gt;&lt;span class="doc"&gt;CMake: Cross Build&lt;/span&gt;&lt;/a&gt;),&lt;/p&gt;
&lt;table class="docutils align-default"&gt;
&lt;tbody&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt; (best in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/x-tools/armv8-rpi4-linux-gnueabihf/bin&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Sysroot; in CMake toolchain files (see
&lt;a class="reference internal" href="../../trainings/material/soup/linux/toolchain/cmake/cross.html"&gt;&lt;span class="doc"&gt;CMake: Cross Build&lt;/span&gt;&lt;/a&gt;,
“Toolchain Files”), this is&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CMAKE_FIND_ROOT_PATH&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/x-tools/armv8-rpi4-linux-gnueabihf/armv8-rpi4-linux-gnueabihf&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;section id="test"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28" role="doc-backlink"&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I tested the toolchain from a number of viewpoints that I describe
below.&lt;/p&gt;
&lt;section id="simplest-c-stdio-h"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29" role="doc-backlink"&gt;Simplest: C, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Check for availability of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id10"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;&lt;a class="reference download internal" download="" href="../../_downloads/930da294b589e3c0ee18e29e9212dc93/c-stdio.c"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;c-stdio.c&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;~/x-tools/armv8-rpi4-linux-gnueabihf/bin/armv8-rpi4-linux-gnueabihf-gcc&lt;span class="w"&gt; &lt;/span&gt;c-stdio.c
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;scp&lt;span class="w"&gt; &lt;/span&gt;a.out&lt;span class="w"&gt; &lt;/span&gt;me@target:
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;me@target&lt;span class="w"&gt; &lt;/span&gt;./a.out
&lt;span class="go"&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="c-iostream"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30" role="doc-backlink"&gt;C++, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Check for availability of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libstdc++&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id11"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;&lt;a class="reference download internal" download="" href="../../_downloads/1f44756998952fcb268db788f7cf730b/c%2B%2B-iostream.cpp"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;c++-iostream.cpp&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-c++ notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;~/x-tools/armv8-rpi4-linux-gnueabihf/bin/armv8-rpi4-linux-gnueabihf-g++&lt;span class="w"&gt; &lt;/span&gt;c++-iostream.cpp
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;scp&lt;span class="w"&gt; &lt;/span&gt;a.out&lt;span class="w"&gt; &lt;/span&gt;me@target:
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;me@target&lt;span class="w"&gt; &lt;/span&gt;./a.out
&lt;span class="go"&gt;Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="c-thread"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31" role="doc-backlink"&gt;C++, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Check for availability of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libpthread&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id12"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;&lt;a class="reference download internal" download="" href="../../_downloads/59cbba0b5d6de2183a7a48be92ed635e/c%2B%2B-thread.cpp"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;c++-thread.cpp&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-c++ notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;([](){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Thread&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bye&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;me@host $ &lt;/span&gt;~/x-tools/armv8-rpi4-linux-gnueabihf/bin/armv8-rpi4-linux-gnueabihf-g++&lt;span class="w"&gt; &lt;/span&gt;-pthread&lt;span class="w"&gt; &lt;/span&gt;c++-thread.cpp
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;scp&lt;span class="w"&gt; &lt;/span&gt;a.out&lt;span class="w"&gt; &lt;/span&gt;me@target:
&lt;span class="gp"&gt;me@host $ &lt;/span&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;me@target&lt;span class="w"&gt; &lt;/span&gt;./a.out
&lt;span class="go"&gt;Hello Thread&lt;/span&gt;
&lt;span class="go"&gt;Bye&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="packaging-distributing-the-toolchain"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id32" role="doc-backlink"&gt;Packaging/Distributing The Toolchain&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The toolchain is fully relocatable. Although
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/x-tools/armv8-rpi4-linux-gnueabihf/&lt;/span&gt;&lt;/code&gt; contains the cross
toolchain &lt;em&gt;together&lt;/em&gt; with the &lt;a class="reference internal" href="../../trainings/material/soup/linux/toolchain/cross/basics.html"&gt;&lt;span class="doc"&gt;sysroot&lt;/span&gt;&lt;/a&gt;, even if you
move it around it will remain self-contained.&lt;/p&gt;
&lt;p&gt;Pack it into an archive,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;~/x-tools&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;raspberry-pi-toolchain.tar.xz&lt;span class="w"&gt; &lt;/span&gt;armv8-rpi4-linux-gnueabihf/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And share it with your colleagues.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="afterword"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id33" role="doc-backlink"&gt;Afterword&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope I could help you with this article. Share it if I could, or, if
I couldn’t, feel free to send me an &lt;a class="reference internal" href="../../about/myself/index.html"&gt;&lt;span class="doc"&gt;email&lt;/span&gt;&lt;/a&gt; explaining why.&lt;/p&gt;
&lt;p&gt;Either way: cross development is not easy, given the huge number of
dependencies between target libraries. This is a rather complex and
fragile thing, and there are sure better ways to do cross development
than the one that I describe here. Ideally, a target vendor (in our
case, the guys who create &lt;a class="reference external" href="https://www.raspberrypi.com/software/"&gt;Raspberry Pi OS&lt;/a&gt;) would release an SDK that
developers could install, and that contained &lt;em&gt;all&lt;/em&gt; that is necessary
to do cross development. This would be the toolchain and associated
basic runtime libraries (described here), and the entire &lt;em&gt;sysroot&lt;/em&gt; of
the target.&lt;/p&gt;
&lt;p&gt;Creating such an SDK is the job of higher level tools like &lt;a class="reference external" href="https://www.yoctoproject.org/"&gt;Yocto&lt;/a&gt; or &lt;a class="reference external" href="https://buildroot.org/"&gt;Buildroot&lt;/a&gt; - but this is another story.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="my-situation" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id3"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;That describes the situation that I encountered;
yours might be a little different.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="ct-prefix" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id6"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;You change the installation prefix by setting the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CT_PREFIX&lt;/span&gt;&lt;/code&gt; environment variable prior to building,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nv"&gt;CT_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/some/other/location&lt;span class="w"&gt; &lt;/span&gt;ct-ng&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="glibc-default-version" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;As of this writing, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ct-ng&lt;/span&gt;&lt;/code&gt; chooses the
GNU C Library version &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.34&lt;/span&gt;&lt;/code&gt;. Your
situation might be different, the
principle remains the same.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2022/09/cross-raspi.html"/>
    <summary>Why This Article? Why Not Use A Prebuilt Toolchain?</summary>
    <published>2022-09-23T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2021/09/xps13-shim-mok-brick/index.html</id>
    <title>How to Brick a €1399 Dell XPS 13</title>
    <updated>2021-09-12T00:00:00+02:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="how-to-brick-a-1399-dell-xps-13"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;In this Article&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#what-happened" id="id3"&gt;What Happened?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#virtualbox-fedora-and-secure-boot" id="id4"&gt;VirtualBox, Fedora, and Secure Boot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#enrolling-machine-owner-key-mok" id="id5"&gt;Enrolling Machine Owner Key (MOK)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#generate-key-pair" id="id6"&gt;Generate Key Pair&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#stage-key-for-enrollment" id="id7"&gt;Stage Key for Enrollment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#reboot-brick" id="id8"&gt;Reboot, Brick&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#diagnostics" id="id9"&gt;Diagnostics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="what-happened"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;What Happened?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I appear to have bricked my XPS 13. Issue still unresolved; still
I’m a little upset (to say the least) that this is possible
altogether. Current tendency is to point finger at firmware
vendors/EFI implementors.&lt;/p&gt;
&lt;p&gt;The original intention of this post was to shine some light of my own
onto &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface#Secure_boot"&gt;Secure Boot&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/rhboot/shim"&gt;Shim&lt;/a&gt;, and module signing, rather
than reproduce &lt;a class="reference external" href="https://stegard.net/2016/10/virtualbox-secure-boot-ubuntu-fail/"&gt;what’s there&lt;/a&gt;. I
got stuck in the middle though, with a bricked €1399 Dell XPS 13, so
the focus has changed a little.&lt;/p&gt;
&lt;p&gt;I’ll start with what I did, where I got, and continue to describe what
the symptoms are.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtualbox-fedora-and-secure-boot"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;VirtualBox, Fedora, and Secure Boot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;VirtualBox comes with kernel modules of its own, consequentially those
are not signed with the Fedora key, and fail to load without further
action. Turning off Secure Boot is an option, but another option
&lt;a class="footnote-reference brackets" href="#correct-option" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; is to sign the VirtualBox modules with my own key -
a so-called &lt;em&gt;machine owner key&lt;/em&gt; (MOK) &lt;a class="footnote-reference brackets" href="#mok-enroll" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="enrolling-machine-owner-key-mok"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;Enrolling Machine Owner Key (MOK)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Not being an expert in cryptography and key management, and not in
UEFI either, what I understand is that the &lt;a class="reference external" href="https://github.com/rhboot/shim"&gt;Shim bootloader&lt;/a&gt; lets us boot non-Microsoft OSen.&lt;/p&gt;
&lt;p&gt;It provides a link in the chain of trust between UEFI secure boot and
the software that comes after it: the GRUB bootloader, the Linux
kernel image, and Linux kernel modules that are loaded after the
kernel has started. See &lt;a class="reference external" href="https://docs.fedoraproject.org/en-US/Fedora/18/html/UEFI_Secure_Boot_Guide/index.html"&gt;here for much more detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s the Linux distribution that is usually responsible to make those
complicated parts play together, and to sign the artifacts
involved. However, if you want to load third party kernel modules
(like VirtualBox’s for example), then you have to&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Create your own key: the “Machine Owner Key” (MOK)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Register (&lt;em&gt;enroll&lt;/em&gt;) it with Shim. It’s the kernel that picks up
Shim’s keys later, and uses those to verify module signatures as
modules get loaded.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="generate-key-pair"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Generate Key Pair&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;MOK/
&lt;span class="gp"&gt;$ &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;req&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-nodes&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-new&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-x509&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-newkey&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rsa:2048&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-keyout&lt;span class="w"&gt; &lt;/span&gt;MOK/jfasch-xps13-mok.priv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-outform&lt;span class="w"&gt; &lt;/span&gt;DER&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;MOK/jfasch-xps13-mok.der&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-days&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;36500&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-subj&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/CN=jfasch/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That was simple. Actually,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-nodes&lt;/span&gt;&lt;/code&gt; leaves the key with an empty passphrase; you might want
to change that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-days&lt;/span&gt; &lt;span class="pre"&gt;36500&lt;/span&gt;&lt;/code&gt; (expiry) appears a bit long to me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Btw., you view the created certificate, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MOK/jfasch-xps13-mok.der&lt;/span&gt;&lt;/code&gt;,
like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;x509&lt;span class="w"&gt; &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;MOK/jfasch-xps13-mok.der&lt;span class="w"&gt; &lt;/span&gt;-inform&lt;span class="w"&gt; &lt;/span&gt;der&lt;span class="w"&gt; &lt;/span&gt;-text
&lt;span class="go"&gt;Certificate:&lt;/span&gt;
&lt;span class="go"&gt;    Data:&lt;/span&gt;
&lt;span class="go"&gt;        Version: 3 (0x2)&lt;/span&gt;
&lt;span class="go"&gt;        Serial Number:&lt;/span&gt;
&lt;span class="go"&gt;            01:16:97:e5:ef:55:37:88:3a:10:29:5b:e5:b3:9c:05:1b:a4:b3:d7&lt;/span&gt;
&lt;span class="go"&gt;        Signature Algorithm: sha256WithRSAEncryption&lt;/span&gt;
&lt;span class="go"&gt;        Issuer: CN = jfasch&lt;/span&gt;
&lt;span class="go"&gt;        Validity&lt;/span&gt;
&lt;span class="go"&gt;            Not Before: Sep  7 12:57:56 2021 GMT&lt;/span&gt;
&lt;span class="go"&gt;            Not After : Aug 14 12:57:56 2121 GMT&lt;/span&gt;
&lt;span class="go"&gt;        Subject: CN = jfasch&lt;/span&gt;
&lt;span class="go"&gt;        Subject Public Key Info:&lt;/span&gt;
&lt;span class="go"&gt;            Public Key Algorithm: rsaEncryption&lt;/span&gt;
&lt;span class="go"&gt;                RSA Public-Key: (2048 bit)&lt;/span&gt;
&lt;span class="go"&gt;                Modulus:&lt;/span&gt;
&lt;span class="go"&gt;                    00:b5:2d:5c:ea:6f:66:b0:d7:95:f6:9e:55:67:34:&lt;/span&gt;
&lt;span class="go"&gt;                    c4:c7:e9:05:c3:9d:0d:71:bc:e9:1b:f5:50:6e:e9:&lt;/span&gt;
&lt;span class="go"&gt;                    95:fe:58:be:f6:99:94:2b:e6:b2:af:59:a0:69:78:&lt;/span&gt;
&lt;span class="go"&gt;                    f8:7d:1c:2c:03:9f:07:26:f6:62:4d:86:e3:dd:7b:&lt;/span&gt;
&lt;span class="go"&gt;                    12:3f:84:c4:99:bd:aa:30:b8:a5:19:23:69:1f:95:&lt;/span&gt;
&lt;span class="go"&gt;                    13:d5:0b:ee:fd:81:69:d1:e3:e8:dc:c5:d2:f3:c2:&lt;/span&gt;
&lt;span class="go"&gt;                    71:0a:08:db:a1:48:e1:89:5b:1c:6d:4c:16:03:4a:&lt;/span&gt;
&lt;span class="go"&gt;                    08:69:77:c4:3f:bd:a9:52:3d:c5:68:b6:f8:c3:a0:&lt;/span&gt;
&lt;span class="go"&gt;                    a8:9b:e1:e6:31:9c:0b:e3:6d:d8:dd:2d:d7:7f:ad:&lt;/span&gt;
&lt;span class="go"&gt;                    bf:14:10:54:e2:ac:a3:79:69:b8:a0:64:3a:28:ad:&lt;/span&gt;
&lt;span class="go"&gt;                    38:a4:f4:96:35:57:63:82:ba:2e:73:41:4f:1d:28:&lt;/span&gt;
&lt;span class="go"&gt;                    6e:15:a4:7e:26:4e:43:fe:9d:bd:ca:81:0e:d9:4f:&lt;/span&gt;
&lt;span class="go"&gt;                    9c:8c:6f:c7:04:d9:ff:de:4e:d3:29:44:c7:c8:f7:&lt;/span&gt;
&lt;span class="go"&gt;                    8c:7f:ec:8e:6d:52:aa:db:49:82:c8:4a:d8:9c:4f:&lt;/span&gt;
&lt;span class="go"&gt;                    ea:c5:d6:45:ba:fb:3b:99:54:c5:b2:a3:0f:5c:63:&lt;/span&gt;
&lt;span class="go"&gt;                    35:9c:e6:b6:ab:ca:cd:1e:5c:6d:ef:4b:e8:72:8e:&lt;/span&gt;
&lt;span class="go"&gt;                    5e:ef:03:16:b6:dd:10:7e:5f:22:2e:ce:dc:50:52:&lt;/span&gt;
&lt;span class="go"&gt;                    7c:51&lt;/span&gt;
&lt;span class="go"&gt;                Exponent: 65537 (0x10001)&lt;/span&gt;
&lt;span class="go"&gt;        X509v3 extensions:&lt;/span&gt;
&lt;span class="go"&gt;            X509v3 Subject Key Identifier:&lt;/span&gt;
&lt;span class="go"&gt;                0A:3F:52:51:DC:75:22:8E:5E:28:4C:15:98:BC:D8:0C:0D:9D:48:77&lt;/span&gt;
&lt;span class="go"&gt;            X509v3 Authority Key Identifier:&lt;/span&gt;
&lt;span class="go"&gt;                keyid:0A:3F:52:51:DC:75:22:8E:5E:28:4C:15:98:BC:D8:0C:0D:9D:48:77&lt;/span&gt;

&lt;span class="go"&gt;            X509v3 Basic Constraints: critical&lt;/span&gt;
&lt;span class="go"&gt;                CA:TRUE&lt;/span&gt;
&lt;span class="go"&gt;    Signature Algorithm: sha256WithRSAEncryption&lt;/span&gt;
&lt;span class="go"&gt;         39:c8:a1:39:1b:27:c0:1f:8f:51:b1:b7:69:a0:12:81:af:9a:&lt;/span&gt;
&lt;span class="go"&gt;         ef:d2:1c:fa:f7:7a:4b:24:9d:36:30:df:47:a6:b5:12:32:06:&lt;/span&gt;
&lt;span class="go"&gt;         d8:80:3b:a3:c9:7e:a8:76:a6:d9:71:f0:07:f0:a3:b4:f9:7a:&lt;/span&gt;
&lt;span class="go"&gt;         c0:88:b1:3f:90:3b:5f:95:57:3b:52:eb:f0:4e:9f:84:9e:f4:&lt;/span&gt;
&lt;span class="go"&gt;         0d:f1:55:fa:b7:02:83:d2:be:e6:68:46:19:7b:ca:ba:c3:6c:&lt;/span&gt;
&lt;span class="go"&gt;         b5:3f:55:dc:06:b6:f0:1e:61:de:9a:2f:eb:b6:32:5a:0d:61:&lt;/span&gt;
&lt;span class="go"&gt;         27:31:2f:57:3a:c1:12:22:9c:4a:0d:41:32:f4:e0:3a:12:9e:&lt;/span&gt;
&lt;span class="go"&gt;         88:35:d0:13:93:24:f6:96:bc:39:4d:80:20:7c:e0:8d:c7:28:&lt;/span&gt;
&lt;span class="go"&gt;         8d:21:80:52:55:db:70:ca:a1:55:c4:18:e9:86:4c:3f:fd:d8:&lt;/span&gt;
&lt;span class="go"&gt;         8d:b4:e9:14:66:60:33:12:2a:b7:8f:48:62:f0:ee:fc:f5:77:&lt;/span&gt;
&lt;span class="go"&gt;         58:5e:51:76:4a:74:9d:4a:1a:b9:85:40:33:eb:b0:b9:6d:12:&lt;/span&gt;
&lt;span class="go"&gt;         d8:00:77:8c:8f:36:d8:08:52:22:ab:ae:5b:e5:7f:d8:ec:0a:&lt;/span&gt;
&lt;span class="go"&gt;         be:10:6e:f4:b5:f7:e6:e1:f7:7c:89:84:b8:b7:25:c0:8c:38:&lt;/span&gt;
&lt;span class="go"&gt;         5c:01:14:15:7e:90:f1:69:99:21:5f:ea:ca:07:72:cb:24:d8:&lt;/span&gt;
&lt;span class="go"&gt;         2c:4d:4d:a0&lt;/span&gt;
&lt;span class="go"&gt;-----BEGIN CERTIFICATE-----&lt;/span&gt;
&lt;span class="go"&gt;MIIDBTCCAe2gAwIBAgIUARaX5e9VN4g6EClb5bOcBRuks9cwDQYJKoZIhvcNAQEL&lt;/span&gt;
&lt;span class="go"&gt;BQAwETEPMA0GA1UEAwwGamZhc2NoMCAXDTIxMDkwNzEyNTc1NloYDzIxMjEwODE0&lt;/span&gt;
&lt;span class="go"&gt;MTI1NzU2WjARMQ8wDQYDVQQDDAZqZmFzY2gwggEiMA0GCSqGSIb3DQEBAQUAA4IB&lt;/span&gt;
&lt;span class="go"&gt;DwAwggEKAoIBAQC1LVzqb2aw15X2nlVnNMTH6QXDnQ1xvOkb9VBu6ZX+WL72mZQr&lt;/span&gt;
&lt;span class="go"&gt;5rKvWaBpePh9HCwDnwcm9mJNhuPdexI/hMSZvaowuKUZI2kflRPVC+79gWnR4+jc&lt;/span&gt;
&lt;span class="go"&gt;xdLzwnEKCNuhSOGJWxxtTBYDSghpd8Q/valSPcVotvjDoKib4eYxnAvjbdjdLdd/&lt;/span&gt;
&lt;span class="go"&gt;rb8UEFTirKN5abigZDoorTik9JY1V2OCui5zQU8dKG4VpH4mTkP+nb3KgQ7ZT5yM&lt;/span&gt;
&lt;span class="go"&gt;b8cE2f/eTtMpRMfI94x/7I5tUqrbSYLISticT+rF1kW6+zuZVMWyow9cYzWc5rar&lt;/span&gt;
&lt;span class="go"&gt;ys0eXG3vS+hyjl7vAxa23RB+XyIuztxQUnxRAgMBAAGjUzBRMB0GA1UdDgQWBBQK&lt;/span&gt;
&lt;span class="go"&gt;P1JR3HUijl4oTBWYvNgMDZ1IdzAfBgNVHSMEGDAWgBQKP1JR3HUijl4oTBWYvNgM&lt;/span&gt;
&lt;span class="go"&gt;DZ1IdzAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQA5yKE5GyfA&lt;/span&gt;
&lt;span class="go"&gt;H49RsbdpoBKBr5rv0hz693pLJJ02MN9HprUSMgbYgDujyX6odqbZcfAH8KO0+XrA&lt;/span&gt;
&lt;span class="go"&gt;iLE/kDtflVc7UuvwTp+EnvQN8VX6twKD0r7maEYZe8q6w2y1P1XcBrbwHmHemi/r&lt;/span&gt;
&lt;span class="go"&gt;tjJaDWEnMS9XOsESIpxKDUEy9OA6Ep6INdATkyT2lrw5TYAgfOCNxyiNIYBSVdtw&lt;/span&gt;
&lt;span class="go"&gt;yqFVxBjphkw//diNtOkUZmAzEiq3j0hi8O789XdYXlF2SnSdShq5hUAz67C5bRLY&lt;/span&gt;
&lt;span class="go"&gt;AHeMjzbYCFIiq65b5X/Y7Aq+EG70tffm4fd8iYS4tyXAjDhcARQVfpDxaZkhX+rK&lt;/span&gt;
&lt;span class="go"&gt;B3LLJNgsTU2g&lt;/span&gt;
&lt;span class="go"&gt;-----END CERTIFICATE-----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="stage-key-for-enrollment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Stage Key for Enrollment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mokutil&lt;/span&gt;&lt;/code&gt; command (comes with Shim) to manage Machine
Owner Keys. The real work is done after a reboot, by a UEFI program
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MokManager&lt;/span&gt;&lt;/code&gt; (also from Shim). All that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mokutil&lt;/span&gt;&lt;/code&gt; does is to
register commands in a kind of a &lt;em&gt;work queue&lt;/em&gt;; it is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MokManager&lt;/span&gt;&lt;/code&gt;
that picks them up and executes them.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="c1"&gt;# as root ...&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;mokutil&lt;span class="w"&gt; &lt;/span&gt;--import&lt;span class="w"&gt; &lt;/span&gt;MOK/jfasch-xps13-mok.der
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It prompts you to give a temporary password; once you reboot and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MokManager&lt;/span&gt;&lt;/code&gt; picks up the “enroll” command, you are prompted to give
that same password to verify that it’s actually you.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="reboot-brick"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8" role="doc-backlink"&gt;Reboot, Brick&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to bring the staged key into UEFI storage that is read-only
after the OS has booted, you reboot, and let &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MokManager&lt;/span&gt;&lt;/code&gt; take over
the process.&lt;/p&gt;
&lt;p&gt;This is where I stand. Blog post over. Nothing. Bloody firmware
wasting CPU, fans running at highest rate, laptop case melting. New
laptop ordered.&lt;/p&gt;
&lt;img alt="blog/2021/09/xps13-shim-mok-brick/brick.jpg" src="blog/2021/09/xps13-shim-mok-brick/brick.jpg" /&gt;
&lt;section id="diagnostics"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9" role="doc-backlink"&gt;Diagnostics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;None yet. Not sure how to proceed.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Laptop is a Dell XPS 13 7390&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UEFI version … it won’t let me look&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="correct-option" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Signing modules appears more appropriate to
me. For one, I like the concept of formalized
trust. For another, it offers me an opportunity
to look into it and understand a little more.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="mok-enroll" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://stegard.net/2016/10/virtualbox-secure-boot-ubuntu-fail/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2021/09/xps13-shim-mok-brick/index.html"/>
    <summary>What Happened?</summary>
    <published>2021-09-12T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/04/bbb.html</id>
    <title>Using BigBlueButton for Online Training</title>
    <updated>2020-04-19T00:00:00+02:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="using-bigbluebutton-for-online-training"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;In this Article&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tl-dr" id="id2"&gt;TL;DR&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#background-information" id="id3"&gt;Background Information&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hosting-setup" id="id4"&gt;Hosting Setup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bigbluebutton-installation" id="id5"&gt;BigBlueButton Installation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#functionality-check" id="id6"&gt;Functionality Check&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#what-else" id="id7"&gt;What Else?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;It’s the &lt;em&gt;Age of the Corona Virus&lt;/em&gt;, and I have had opportunity to gain
a little experience with &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html"&gt;&lt;span class="doc"&gt;Microsoft Teams&lt;/span&gt;&lt;/a&gt; and &lt;a class="reference external" href="https://zoom.us/"&gt;Zoom&lt;/a&gt;
recently. I now know that doing my &lt;a class="reference internal" href="../../trainings/index.html"&gt;&lt;span class="doc"&gt;trainings&lt;/span&gt;&lt;/a&gt;
online &lt;em&gt;is definitely possible&lt;/em&gt; - it is more a matter of attitude
&lt;a class="footnote-reference brackets" href="#need-attitude" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; than a technical problem. Plus: I strongly believe
that it is a shame I haven’t pursued this before. This post is an
attempt at correcting that.&lt;/p&gt;
&lt;p&gt;Microsoft Teams’ and Zoom’s focus are online meetings and
collaboration. Moreover, both are &lt;em&gt;hosted&lt;/em&gt; solutions - you do not
setup software and servers, but rather throw in money &lt;strong&gt;and/or data&lt;/strong&gt;
and be done.&lt;/p&gt;
&lt;p&gt;A different thing is &lt;a class="reference external" href="https://bigbluebutton.org/"&gt;BigBlueButton&lt;/a&gt;:
it focuses on &lt;em&gt;online teaching&lt;/em&gt; which makes it perfect for my
needs. If you care about trust, it has the benefits that&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Software is &lt;a class="reference external" href="https://github.com/bigbluebutton"&gt;open source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can easily install and host it yourself, which is what this
article describes. It is also possible to spend money and let
somebody else do that; see below.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installing and hosting a solution that beats - &lt;em&gt;I mean it&lt;/em&gt; - Teams and
Zoom might sound like &lt;em&gt;a lot of work&lt;/em&gt;. Just how much work that is, is
the topic of this article.&lt;/p&gt;
&lt;section id="tl-dr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First: not a lot of work!&lt;/strong&gt; I have setup a fully functional
BigBlueButton instance out there in the cloud in less than an hour
(including cloud). And for sure I am not a talented admin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second: it just works!&lt;/strong&gt; With the focus on online training, features
include&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Video and audio sharing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client runs in the browser; participants do not need to install
anything&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whiteboard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chats (class wide and one-to-one)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breakout rooms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fine grained (though easy) administration of users and rooms&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this, BigBlueButton &lt;em&gt;beats any of the above&lt;/em&gt; regarding feature
set and stability. Note that I do not intend to provide video
streaming to hundreds of thousands, for example, so I cannot say
anything about BigBlueButton in that regard.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="background-information"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;Background Information&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the curious, here’s some meta information along with links I have
gathered while curiously reading around.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;. BigBlueButton is licensed under the &lt;a class="reference external" href="http://www.gnu.org/licenses/lgpl.html"&gt;LGPL&lt;/a&gt;. See &lt;a class="reference external" href="https://bigbluebutton.org/open-source-license/"&gt;here&lt;/a&gt; for more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt; is &lt;a class="reference external" href="https://github.com/bigbluebutton"&gt;hosted on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commercial support&lt;/strong&gt;. &lt;a class="reference external" href="https://blindsidenetworks.com/"&gt;Blindside Networks&lt;/a&gt; is the company who governs
development. Along with a &lt;a class="reference external" href="https://bigbluebutton.org/commercial-support/"&gt;number of other companies&lt;/a&gt;, they provide
support and hosting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web client, architecture&lt;/strong&gt;. The native HTML5 client is &lt;a class="reference external" href="https://blindsidenetworks.com/2019/03/15/html5-client-is-coming/"&gt;relatively
new&lt;/a&gt;,
though exceptionally stable across modern browsers. It heavily depends
on the browser’s &lt;a class="reference external" href="https://webrtc.org/"&gt;WebRTC&lt;/a&gt; support. Before
that, BigBlueButton used &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Adobe_Flash"&gt;Flash&lt;/a&gt; for their UI; these
times have come to an end fortunately, due to Flash’s long and painful
death.&lt;/p&gt;
&lt;p&gt;There is more to it than just the browser, naturally - see their
&lt;a class="reference external" href="https://docs.bigbluebutton.org/2.2/architecture.html"&gt;architecture&lt;/a&gt; for more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hosting-setup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Hosting Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I admit I am not a great admin. Programming is fine, and I understand
what The Internet and firewalls are, but maintaining machines and
networks is not something I’m good at, or even like. Consequentially,
I have kept myself out of this business as much as I can. For example,
I have never created a machine in the cloud - knowing that I couldn’t
avoid it indefinitely. Time has come, and in case you are in the same
position, then I can tell you it is not rocket science.&lt;/p&gt;
&lt;p&gt;Here’s what I used for the test setup in this article.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cloud&lt;/strong&gt;. &lt;a class="reference external" href="https://cloud.google.com/gcp/getting-started"&gt;Google Cloud Platform&lt;/a&gt; lets you &lt;a class="reference external" href="https://cloud.google.com/compute/docs/quickstart-linux"&gt;setup a
VM&lt;/a&gt; in no
time. (Others sure do too.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSL/TLS&lt;/strong&gt;. BigBlueButton’s client runs in the browser (using
&lt;a class="reference external" href="https://webrtc.org/"&gt;WebRTC&lt;/a&gt;) which is cool. This requires that
the browser access camera and microphone though - browsers do this
only when the connection is secured by TLS. Long story short: I
decadently let the install script generate me a certificate from
&lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;. (This matters when it
comes to firewall settings.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Domain name&lt;/strong&gt;. At my DNS provider, I reserved
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bbb.faschingbauer.co.at&lt;/span&gt;&lt;/code&gt;; I’ll use this domain name in the rest
of the article.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What follows are the parameters of the VM I provisioned at GCP. Note
that this is only a first shot, so don’t take this as real expertise.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Machine type&lt;/strong&gt;. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;n1-standard-8&lt;/span&gt;&lt;/code&gt; has 8 CPUs and 30G of RAM; this
should suffice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Boot disk&lt;/strong&gt;. Default is Debian, but BigBlueButton requires Ubuntu
16.04 LTS - change it accordingly. I gave it 500GB of disk space while
I was at it (10GB appeared a little sparse when it comes to recording
meetings).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;External IP address&lt;/strong&gt;. Create a static IP. This is where I point
the DNS address (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;A&lt;/span&gt;&lt;/code&gt;) record for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bbb.faschingbauer.co.at&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Firewall&lt;/strong&gt; (initial setting). HTTP and HTTPS. HTTPS is mandatory
(see above). HTTP is necessary for automatic Let’s Encrypt
certificate issuance during the BigBlueButton installation. You can
remove the rule when done, or &lt;a class="reference external" href="https://letsencrypt.org/docs/allow-port-80/"&gt;simply leave it in place&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this, you create the machine. Once that is done, add another
firewall rule,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Firewall&lt;/strong&gt; (again): permit UDP port range 16384-32768.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firewall settings are important; here’s what I have,&lt;/p&gt;
&lt;img alt="blog/2020/04/gcp-firewall.png" src="blog/2020/04/gcp-firewall.png" /&gt;
&lt;p&gt;Now login to the machine via SSH (clickable in the GCP window).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bigbluebutton-installation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;BigBlueButton Installation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At first I followed the &lt;a class="reference external" href="https://docs.bigbluebutton.org/2.2/install.html#step-by-step"&gt;step-by-step instructions&lt;/a&gt;, but
soon lost track. If you don’t have a good understanding of the
architecture, following the &lt;a class="reference external" href="https://docs.bigbluebutton.org/2.2/install.html#step-by-step"&gt;step-by-step instructions&lt;/a&gt;
might easily lead to mistakes such as letting TCP/7443 through your
firewall.&lt;/p&gt;
&lt;p&gt;At some point I decided that I do &lt;em&gt;not&lt;/em&gt; have to understand everything,
and switched to the decadent &lt;a class="reference external" href="https://github.com/bigbluebutton/bbb-install"&gt;installation script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here I deviate a bit from the &lt;a class="reference external" href="https://github.com/bigbluebutton/bbb-install"&gt;suggestions made for installation
script usage&lt;/a&gt;. Not
wanting to pipe the internet into &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bash&lt;/span&gt;&lt;/code&gt; (as root), I download the
script first and check what it does (as normal user),&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://ubuntu.bigbluebutton.org/bbb-install.sh
&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;less&lt;span class="w"&gt; &lt;/span&gt;bbb-install.sh
&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;755&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bbb-install.sh
&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;./bbb-install.sh&lt;span class="w"&gt; &lt;/span&gt;-h
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;  -v &amp;lt;version&amp;gt;           Install given version of BigBlueButton (e.g. &amp;#39;xenial-220&amp;#39;) (required)&lt;/span&gt;
&lt;span class="go"&gt;  -s &amp;lt;hostname&amp;gt;          Configure server with &amp;lt;hostname&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  -l                     Install Let&amp;#39;s Encrypt certificate (required)&lt;/span&gt;
&lt;span class="go"&gt;  -e &amp;lt;email&amp;gt;             Email for Let&amp;#39;s Encrypt certbot&lt;/span&gt;
&lt;span class="go"&gt;  -g                     Install Greenlight&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pure decadence from now on. I even let the script install a
&lt;a class="reference external" href="https://letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt; certificate for me. (I
named the machine &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bbb&lt;/span&gt;&lt;/code&gt;, and my login name is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jf&lt;/span&gt;&lt;/code&gt;, hence the
prompt shows &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jf&amp;#64;bbb&lt;/span&gt;&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;./bbb-install.sh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;xenial-220&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;bbb.faschingbauer.co.at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;jf@faschingbauer.co.at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-g
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After roughly 15 minutes, all is set up.&lt;/p&gt;
&lt;p&gt;Next, an administrator must be created so you can point your browser
at it and do something meaningful. Apparently, the installation script
does not do that automatically, so one has to manually correct this
minor hiccup.&lt;/p&gt;
&lt;p&gt;Login to the machine (with GCP, you just click on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SSH&lt;/span&gt;&lt;/code&gt; field in
your VM instance listing), and&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;jf@bbb:~$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;-i
&lt;span class="gp"&gt;root@bbb:~# &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~jf/greenlight/
&lt;span class="gp"&gt;root@bbb:/home/jf/greenlight# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;greenlight-v2&lt;span class="w"&gt; &lt;/span&gt;bundle&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rake&lt;span class="w"&gt; &lt;/span&gt;admin:create
&lt;span class="go"&gt;Account succesfully created.&lt;/span&gt;
&lt;span class="go"&gt;Email: admin@example.com&lt;/span&gt;
&lt;span class="go"&gt;Password: administrator&lt;/span&gt;
&lt;span class="go"&gt;Role: admin&lt;/span&gt;
&lt;span class="go"&gt;PLEASE CHANGE YOUR PASSWORD IMMEDIATELY&lt;/span&gt;
&lt;span class="gp"&gt;root@bbb:/home/jf/greenlight#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Done. Point the browser at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://bbb.faschingbauer.co.at&lt;/span&gt;&lt;/code&gt;, and you’ll see BigBlueButton’s front page.&lt;/p&gt;
&lt;img alt="blog/2020/04/bbb-front.jpg" src="blog/2020/04/bbb-front.jpg" style="width: 768.8000000000001px; height: 419.20000000000005px;" /&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Danger&lt;/p&gt;
&lt;p&gt;As they say,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLEASE CHANGE YOUR PASSWORD IMMEDIATELY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Login as stated above &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;admin&amp;#64;example.com&lt;/span&gt;&lt;/code&gt;, password
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;administrator&lt;/span&gt;&lt;/code&gt;, and modify these credentials to something more
secure.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="functionality-check"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Functionality Check&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creating a room for a meeting is as easy as clicking on a big fat
button,&lt;/p&gt;
&lt;img alt="blog/2020/04/bbb-room-create.png" src="blog/2020/04/bbb-room-create.png" style="width: 519.6px; height: 619.1999999999999px;" /&gt;
&lt;p&gt;Here’s a screenshot from a tryout session that I had with the
kids. Video and audio quality no different from other tools, from a
layman’s perspective. No glitches.&lt;/p&gt;
&lt;img alt="blog/2020/04/bbb-family.jpg" src="blog/2020/04/bbb-family.jpg" style="width: 807.0999999999999px; height: 440.29999999999995px;" /&gt;
&lt;p&gt;I haven’t used the tool for a real-life training yet, as of
2020-04-21. What I did though, together with the kids, is to try out
some of the features that I knew I am going to use in future
trainings, like&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Whiteboard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chats&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breakout rooms&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Really cool. All there, all working.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s no point in reproducing the steps here in this article. I
suggest you take yourself a few minutes to try all those out. All I
can say is that using BigBlueButton is absolutely simple - which
usually means that it is well thought-out.&lt;/p&gt;
&lt;p&gt;The Internet (in its Youtube incarnation) has a number of tutorials
for basic and advanced usage. I cite some of them here; they answer
any question I could have had (as well as those I couldn’t).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Q2tG2SS4gXA"&gt;“BigBlueButton overview for moderator/presenters (with breakout
rooms) in BigBlueButton”&lt;/a&gt;. By Fred Dixon,
BigBlueButton project leader.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=9WGrVCNvNuY"&gt;“BigBlueButton (AKA Canvas Conferences) - Student Tutorial”&lt;/a&gt;. By Bradley
Schreffler who has a number of good videos. I strongly suggest you
suggest your students to invest a few minutes upfront, to see what
they’re up to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=C6GtSQ30Voo"&gt;“BigBlueButton - Frequently Asked Questions”&lt;/a&gt;. Bradley
Schreffler, clearing up a number of questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=oHxJ2YuNfxk"&gt;“BigBlueButton - Advanced and Interactive Features”&lt;/a&gt;. Bradley Schreffler
on a couple of not-so-obvious features.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list is by far not exhaustive; look out for yourself if you have
questions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-else"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;What Else?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article only covers my personal needs - those of a part-time
trainer who gives online trainings from time to time. There is more to
be had from BigBlueButton though, only some of which I list here.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It integrates with &lt;a class="reference external" href="https://moodle.org/"&gt;Moodle&lt;/a&gt;; see &lt;a class="reference external" href="https://moodle.com/certified-integrations/bigbluebutton/"&gt;here&lt;/a&gt; for
more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It integrates with &lt;a class="reference external" href="https://bigbluebutton.org/integrations/"&gt;a large number of other systems&lt;/a&gt; that I have never heard
of.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apparently the developers have good taste, which can be seen from
&lt;a class="reference external" href="https://docs.bigbluebutton.org/dev/api.html"&gt;the API they provide&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It looks like the Corona era will not come to an end as fast as we
might wish. Many people like me are currently looking for a way to
carry on with their business, only in its online form. Whatever it
will look like, my hope is that some of it will make its way into
normality - whatever the definition of normality will be once we have
returned to “business as usual”.&lt;/p&gt;
&lt;p&gt;BigBlueButton and the set of involved companies have no marketing
budget large enough to advertise their services on TV. Nevertheless,
they are able to provide a viable alternative to those who just shout
loud enough.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="need-attitude" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;It’s not like my online training capabilities are
perfect. Not even my face to face capabilities
are.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/04/bbb.html"/>
    <summary>TL;DR</summary>
    <published>2020-04-19T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/03/ms-teams-on-linux.html</id>
    <title>Using Microsoft Teams on Linux</title>
    <updated>2020-04-09T00:00:00+02:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="using-microsoft-teams-on-linux"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#screen-sharing-x11-revival" id="id4"&gt;Screen Sharing: X11 Revival&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rpm-package-meh" id="id5"&gt;RPM Package (Meh!)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#annoyance-1-keeps-running-in-background" id="id6"&gt;Annoyance #1: Keeps Running in Background&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#annoyance-2-re-registers-itself-for-autostart" id="id7"&gt;Annoyance #2: (Re)Registers Itself For Autostart&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#run-in-browser-my-recommendation" id="id8"&gt;Run In Browser (My Recommendation)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html#desktop-sharing-x11-revival"&gt;&lt;span class="std std-ref"&gt;back to X11&lt;/span&gt;&lt;/a&gt;, and
then &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html#ms-teams-browser-app"&gt;&lt;span class="std std-ref"&gt;use Chromium&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I frequently run &lt;a class="reference internal" href="../../trainings/index.html"&gt;&lt;span class="doc"&gt;trainings&lt;/span&gt;&lt;/a&gt; for
companies. These trainings use to take place physically - I book hotel
and train for the duration of the training, meet people face to face,
have fun, and then travel home again.&lt;/p&gt;
&lt;p&gt;Things have changed: it’s the &lt;em&gt;Age Of The Corona Virus&lt;/em&gt;, everybody’s
working from home &lt;a class="footnote-reference brackets" href="#homeoffice-should-be-default" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, and the demand for
video conferencing solutions has grown dramatically. A customer,
having ordered a training end of March, has asked me if we could do
the training online - using Microsoft Teams &lt;a class="footnote-reference brackets" href="#teamviewer-experience" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a number of hours to work out if and how that is done on
Linux, and to test all the details; this is what I want to share with
you in this post. It is sure not a definitive guide as I am not a
Microsoft expert &lt;a class="footnote-reference brackets" href="#driver-dont-tell-anybody" id="id3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, and things might have
changed as you read this. Please &lt;a class="reference internal" href="../../about/myself/index.html"&gt;&lt;span class="doc"&gt;inform me&lt;/span&gt;&lt;/a&gt; if you have news.&lt;/p&gt;
&lt;section id="screen-sharing-x11-revival"&gt;
&lt;span id="desktop-sharing-x11-revival"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Screen Sharing: X11 Revival&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off: none of the methods described in the remainder works with
&lt;a class="reference external" href="https://wayland.freedesktop.org/"&gt;Wayland&lt;/a&gt;. Wayland (and its
reference implementation, Weston) is intended to replace the X11
display protocol which has shown its age. Major distributions have
invested large amounts of work to make the switch, to the point that
Wayland runs really smooth nowadays. An X11 compatibility layer is
there to keep X11 applications happy.&lt;/p&gt;
&lt;p&gt;Smooth - except for cornercases like X11 programs which want to share
the desktop, apparently. For Teams, this means:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Teams is obviously an X11 program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html#ms-teams-desktop-app"&gt;&lt;span class="std std-ref"&gt;native desktop app (the RPM installation)&lt;/span&gt;&lt;/a&gt; crashes hard when you hover over the “share
screen” field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html#ms-teams-browser-app"&gt;&lt;span class="std std-ref"&gt;browser app&lt;/span&gt;&lt;/a&gt;, from the sharer’s
point of view, appears to share like you tell it to. Meeting
participants only see the mouse on a black screen, no matter what
the sharer does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, here’s how to make your login screen start an X11 session, rather
than a Wayland session.&lt;/p&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/gdm/custom.conf&lt;/span&gt;&lt;/code&gt;, a .ini style configuration file, you see
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[daemon]&lt;/span&gt;&lt;/code&gt; section,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[daemon]&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;Uncomment&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;below&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;force&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;login&lt;span class="w"&gt; &lt;/span&gt;screen&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;Xorg
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;WaylandEnable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;DefaultSession&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gnome-xorg.desktop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Switch to X11,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[daemon]&lt;/span&gt;
&lt;span class="go"&gt;WaylandEnable=false&lt;/span&gt;
&lt;span class="go"&gt;DefaultSession=gnome-xorg.desktop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Log out (i.e. terminate the current Wayland session), log back in
(i.e. start an X11 session), done.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rpm-package-meh"&gt;
&lt;span id="ms-teams-desktop-app"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;RPM Package (Meh!)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(I’m on Fedora; there’s also a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.deb&lt;/span&gt;&lt;/code&gt; available.)&lt;/p&gt;
&lt;p&gt;Download the RPM from &lt;a class="reference external" href="https://teams.microsoft.com/downloads"&gt;here&lt;/a&gt;; it’ll be available as
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/Downloads/teams-1.3.00.5153-1.x86_64.rpm&lt;/span&gt;&lt;/code&gt; (your version might
differ) if you used a browser for the download. If you used &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wget&lt;/span&gt;&lt;/code&gt;
then you know better where the file is.&lt;/p&gt;
&lt;p&gt;Install it as root,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rpm&lt;span class="w"&gt; &lt;/span&gt;-ivh&lt;span class="w"&gt; &lt;/span&gt;~/Downloads/teams-1.3.00.5153-1.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Start it,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That was easy. Login with your Microsoft account, and figure out how
to use it (this is not the point of this post).&lt;/p&gt;
&lt;div class="note update admonition"&gt;
&lt;p class="admonition-title"&gt;Updated on 2020-04-09&lt;/p&gt;
&lt;p&gt;The following annoyances of the desktop app can be switched off in
the settings; I should have checked more closely. See &lt;a class="reference external" href="https://docs.microsoft.com/answers/comments/22019/view.html"&gt;here&lt;/a&gt;,
thanks to Marjan Javorka.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="annoyance-1-keeps-running-in-background"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Annoyance #1: Keeps Running in Background&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Call me old fashioned, but I like programs to quit when I tell them
to - especially when I know they use my microphone and camera. Teams
doesn’t; it keeps running in the background,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-efl&lt;span class="p"&gt;|&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;teams
&lt;span class="go"&gt;0 S jfasch     61762    1670  1  80   0 - 947213 -     17:04 ?        00:00:22 /usr/share/teams/teams&lt;/span&gt;
&lt;span class="go"&gt;0 S jfasch     61764   61762  0  80   0 - 98775 -      17:04 ?        00:00:00 /usr/share/teams/teams --type=zygote --no-sandbox&lt;/span&gt;
&lt;span class="go"&gt;0 S jfasch     61800   61762  0  80   0 - 239615 -     17:04 ?        00:00:13 /usr/share/teams/teams --type=gpu-process --enable-features=SharedArrayBuffer --disable-features=SpareRendererForSitePerProcess --gpu-preferences=KAAAAAAAAACAAABAAQAAAAAAAAAAAGAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAA --service-request-channel-token=4327801531638606376&lt;/span&gt;
&lt;span class="go"&gt;1 S jfasch     61825   61764  0  80   0 - 420846 -     17:04 ?        00:00:00 /usr/share/teams/teams --type=renderer --autoplay-policy=no-user-gesture-required --enable-features=SharedArrayBuffer --disable-features=SpareRendererForSitePerProcess --service-pipe-token=12993561460135093079 --lang=en-US --app-path=/usr/share/teams/resources/app.asar --user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) MicrosoftTeams-Preview/1.3.00.5153 Chrome/69.0.3497.128 Electron/4.2.12 Safari/537.36 --node-integration=false --webview-tag=false --no-sandbox --preload=/usr/share/teams/resources/app.asar/lib/renderer/notifications/preload_notifications.js --disable-remote-module --background-color=#fff --electron-shared-settings=eyJjci5jb21wYW55IjoiRWxlY3Ryb24iLCJjci5kdW1wcyI6IiIsImNyLmVuYWJsZWQiOmZhbHNlLCJjci5wcm9kdWN0IjoiRWxlY3Ryb24iLCJjci5zZXNzaW9uIjoiIiwiY3IudXJsIjoiIiwiY3IudmVyc2lvbiI6InY0LjIuMTIifQ== --num-raster-threads=4 --enable-main-frame-before-activation --service-request-channel-token=12993561460135093079 --renderer-client-id=7 --shared-files=v8_context_snapshot_data:100,v8_natives_data:101 --msteams-process-type=notificationsManager&lt;/span&gt;
&lt;span class="go"&gt;1 S jfasch     61973   61764  2  80   0 - 790018 -     17:04 ?        00:00:45 /usr/share/teams/teams --type=renderer --autoplay-policy=no-user-gesture-required --enable-features=SharedArrayBuffer --disable-features=SpareRendererForSitePerProcess --service-pipe-token=432557619363765409 --lang=en-US --app-path=/usr/share/teams/resources/app.asar --user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) MicrosoftTeams-Preview/1.3.00.5153 Chrome/69.0.3497.128 Electron/4.2.12 Safari/537.36 --node-integration=false --webview-tag=true --no-sandbox --preload=/usr/share/teams/resources/app.asar/lib/renderer/preload.js --disable-remote-module --background-color=#fff --electron-shared-settings=eyJjci5jb21wYW55IjoiRWxlY3Ryb24iLCJjci5kdW1wcyI6IiIsImNyLmVuYWJsZWQiOmZhbHNlLCJjci5wcm9kdWN0IjoiRWxlY3Ryb24iLCJjci5zZXNzaW9uIjoiIiwiY3IudXJsIjoiIiwiY3IudmVyc2lvbiI6InY0LjIuMTIifQ== --num-raster-threads=4 --enable-main-frame-before-activation --service-request-channel-token=432557619363765409 --renderer-client-id=16 --shared-files=v8_context_snapshot_data:100,v8_natives_data:101 --msteams-process-type=mainWindow&lt;/span&gt;
&lt;span class="go"&gt;1 S jfasch     62033   61764  5  80   0 - 1259666 -    17:04 ?        00:01:26 /usr/share/teams/teams --type=renderer --autoplay-policy=no-user-gesture-required --enable-features=SharedArrayBuffer --disable-features=SpareRendererForSitePerProcess --service-pipe-token=5585537623314398260 --lang=en-US --app-path=/usr/share/teams/resources/app.asar --user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) MicrosoftTeams-Preview/1.3.00.5153 Chrome/69.0.3497.128 Electron/4.2.12 Safari/537.36 --node-integration=false --webview-tag=false --no-sandbox --preload=/usr/share/teams/resources/app.asar/lib/pluginhost/preload.js --disable-remote-module --background-color=#fff --electron-shared-settings=eyJjci5jb21wYW55IjoiRWxlY3Ryb24iLCJjci5kdW1wcyI6IiIsImNyLmVuYWJsZWQiOmZhbHNlLCJjci5wcm9kdWN0IjoiRWxlY3Ryb24iLCJjci5zZXNzaW9uIjoiIiwiY3IudXJsIjoiIiwiY3IudmVyc2lvbiI6InY0LjIuMTIifQ== --num-raster-threads=4 --enable-main-frame-before-activation --service-request-channel-token=5585537623314398260 --renderer-client-id=20 --shared-files=v8_context_snapshot_data:100,v8_natives_data:101 --msteams-process-type=pluginHost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When I look at the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SZ&lt;/span&gt;&lt;/code&gt; column of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; output, that
&lt;a class="reference internal" href="../2012/04/Why-ps-sucks.html"&gt;&lt;span class="doc"&gt;makes me wish&lt;/span&gt;&lt;/a&gt; it would really
stop. It consumes insane amounts of memory doing nothing.&lt;/p&gt;
&lt;p&gt;Make it so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;killall&lt;span class="w"&gt; &lt;/span&gt;teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Check,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-efl&lt;span class="p"&gt;|&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;teams
&lt;span class="go"&gt;0 R jfasch     63500    1670 47  80   0 - 298385 -     17:41 ?        00:00:00 /usr/share/teams/teams&lt;/span&gt;
&lt;span class="go"&gt;0 S jfasch     63502   63500  1  80   0 - 98775 -      17:41 ?        00:00:00 /usr/share/teams/teams --type=zygote --no-sandbox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Blood pressure rising,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;killall&lt;span class="w"&gt; &lt;/span&gt;-9&lt;span class="w"&gt; &lt;/span&gt;teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If I don’t wipe it entirely with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;killall&lt;/span&gt; &lt;span class="pre"&gt;-9&lt;/span&gt;&lt;/code&gt;, it comes back from
time to time and says, “Please log in with your Microsoft
account”. &lt;em&gt;Cool feature, guys!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="annoyance-2-re-registers-itself-for-autostart"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Annoyance #2: (Re)Registers Itself For Autostart&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Logout, and back in. Teams pops up right into my face. Maybe that’s
the desired behavior in the office world where everyone’s in a meeting
at any given point in time. I live in a different world though: when I
want something to pop into my face in the morning (I rarely do), I
configure it so.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;~/.config/autostart/teams.desktop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;True, I could have edited the offending line of that file,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;X-GNOME-Autostart-enabled=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But no.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rpm&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="run-in-browser-my-recommendation"&gt;
&lt;span id="ms-teams-browser-app"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id8" role="doc-backlink"&gt;Run In Browser (My Recommendation)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It turns out that Teams can run in the browser (thanks to &lt;a class="reference external" href="https://webassembly.org/"&gt;WebAssembly&lt;/a&gt;?). Really cool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I need not install a closed-source program (and let it access all my
files)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I need not blow it out of the water when my blood pressure rises&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It simply goes away when I close the browser tab&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Its security is that of the browser (if that’s an argument)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simply point your browser to
&lt;a class="reference external" href="https://teams.microsoft.com/"&gt;https://teams.microsoft.com/&lt;/a&gt;. That’s it.&lt;/p&gt;
&lt;p&gt;Well, no, it’s actually not so simple.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It does not work with Firefox 74.0 (shipped with Fedora 31, as of
2020-03-22). The error message says something like “DOM storage not
enabled”. I checked, DOM storage &lt;em&gt;is&lt;/em&gt; enabled; this is where I gave
up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It works in Chromium “Version 80.0.3987.132 (Developer Build) Fedora
Project (64-bit)” (as it says) (shipped with Fedora 31, as of
2020-03-22)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take care to run &lt;a class="reference internal" href="../2020/03/ms-teams-on-linux.html#desktop-sharing-x11-revival"&gt;&lt;span class="std std-ref"&gt;X11 as explained above&lt;/span&gt;&lt;/a&gt; (to be able to share the desktop)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="homeoffice-should-be-default" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Once the plague comes to an end, I
hope we remember that The Internet
hasn’t originally been invented for
the purpose of gaming, streaming,
and pornwatching - and work from
home more.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="driver-dont-tell-anybody" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id3"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I have &lt;a class="reference internal" href="../../about/myself/projects-de.html#projekte-device-driver-for-doze"&gt;&lt;span class="std std-ref"&gt;written a device driver
for Windows&lt;/span&gt;&lt;/a&gt;, but
please don’t tell anybody.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="teamviewer-experience" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I have used &lt;a class="reference external" href="https://www.teamviewer.com/"&gt;Teamviewer&lt;/a&gt; in the
past, as a part-time teacher at &lt;a class="reference external" href="https://www.fh-joanneum.at/"&gt;FH
Joanneum&lt;/a&gt; - it
works great on Linux.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/03/ms-teams-on-linux.html"/>
    <summary>Screen Sharing: X11 Revival</summary>
    <published>2020-03-22T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/03/custom-domain-gh-pages.html</id>
    <title>Adding a Custom Domain to a Github Pages Project Site</title>
    <updated>2020-03-03T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="adding-a-custom-domain-to-a-github-pages-project-site"&gt;

&lt;p&gt;In the &lt;a class="reference internal" href="../2020/03/sphinx-gh-pages.html"&gt;&lt;span class="doc"&gt;previous post&lt;/span&gt;&lt;/a&gt; I pushed
generated static site content to &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, to be served as
&lt;a class="reference external" href="https://jfasch.github.io/jfasch-home-pages/"&gt;https://jfasch.github.io/jfasch-home-pages/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not being a marketing expert (the opposite is the case), I do suspect
that promoting that URL as my homepage would appear unprofessional. Rather,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I own a domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make things easy for people who have the intention of throwing
money at me, I want to have the following URLs point to the above
Github Pages site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.faschingbauer.me"&gt;http://www.faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://faschingbauer.me"&gt;http://faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://faschingbauer.me"&gt;https://faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is remarkably simple nowadays. The Github Pages documentation is
a little confusing: they only talk about user and organization pages,
and &lt;em&gt;not&lt;/em&gt; about project pages. There are &lt;a class="reference external" href="https://stackoverflow.com/questions/9082499/custom-domain-for-github-project-pages"&gt;numerous posts&lt;/a&gt;
on the internet that suggest that adding a custom domain to a &lt;em&gt;project
page&lt;/em&gt; has been cumbersome in the past - these days are over,
apparently. Following is what I did.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-a-subdomain-www-faschingbauer-me" id="id1"&gt;Configure a Subdomain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-an-apex-domain-faschingbauer-me" id="id2"&gt;Configure an Apex Domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="configure-a-subdomain-www-faschingbauer-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1" role="doc-backlink"&gt;Configure a Subdomain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;For the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt; project, configure a custom domain&lt;/p&gt;
&lt;p&gt;(Enforcing HTTPS also makes sense, while we are at it)&lt;/p&gt;
&lt;img alt="blog/2020/03/custom-domain.png" src="blog/2020/03/custom-domain.png" /&gt;
&lt;p&gt;All this does is to create a &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;; pull the changes,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;pull
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At your DNS provider, create a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CNAME&lt;/span&gt;&lt;/code&gt; DNS record for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; and set its value to point to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io&lt;/span&gt;&lt;/code&gt;. Wait a day before you publish the new site
URL - it may take some time until the changes have propagated to
other name servers. Check like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;dig&lt;span class="w"&gt; &lt;/span&gt;www.faschingbauer.me

&lt;span class="go"&gt;;www.faschingbauer.me.            IN      A&lt;/span&gt;

&lt;span class="go"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="go"&gt;www.faschingbauer.me.     1100    IN      CNAME   jfasch.github.io.&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.109.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.111.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.110.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.108.153&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Output stripped for brevity.) In the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ANSWER&lt;/span&gt; &lt;span class="pre"&gt;SECTION&lt;/span&gt;&lt;/code&gt; you can
see that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me.&lt;/span&gt;&lt;/code&gt; (the trailing dot says this is a
FQDN “Fully Qualified Domain Name”) is an alias (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CNAME&lt;/span&gt;&lt;/code&gt;) for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io.&lt;/span&gt;&lt;/code&gt;. And btw., &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io.&lt;/span&gt;&lt;/code&gt; has four
addresses (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;A&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done; surf to &lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="configure-an-apex-domain-faschingbauer-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;Configure an Apex Domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have the subdomain &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; in place, pointing to
our site; now we want &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt; to go to the same
site. Github automatically, magically, apparently, redirects between
apex and subdomains. Consequentially, it is just a matter of DNS
configuration: at the DNS provider, arrange that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;
points to one or more of Github’s static IP addresses (taken from the
output of the above &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dig&lt;/span&gt;&lt;/code&gt; command). These are,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;185.199.108.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.109.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.110.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.111.153&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the DNS provider, and arrange that the DNS &lt;em&gt;address&lt;/em&gt; (A) record
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt; points to one or all of these addresses.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/03/custom-domain-gh-pages.html"/>
    <summary>In the previous post I pushed
generated static site content to Github Pages, to be served as
https://jfasch.github.io/jfasch-home-pages/.</summary>
    <published>2020-03-03T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/03/sphinx-gh-pages.html</id>
    <title>Deploying Sphinx Generated Documentation to Github Pages</title>
    <updated>2020-03-02T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="deploying-sphinx-generated-documentation-to-github-pages"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#create-site-publication-repo" id="id2"&gt;Create “Site Publication Repo”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-github-pages-for-jfasch-home-pages" id="id3"&gt;Configure Github Pages for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#time-for-deployment" id="id4"&gt;Time for Deployment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, a hosting service for
static webpages, is free and easy, although run by Microsoft
&lt;a class="footnote-reference brackets" href="#well-theres-marketing" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Times are changing.&lt;/p&gt;
&lt;p&gt;It took me a while to figure out how to use the service properly,
although, retrospectively, it hasn’t been so hard. The main points
were,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Github Pages, by default, &lt;em&gt;builds&lt;/em&gt; the stuff you push using &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. I don’t use Jekyll; rather I generate my
site locally, and want to upload &lt;em&gt;generated content only&lt;/em&gt;. This is
the topic of this post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The uploaded content is then served as
&lt;a class="reference external" href="https://jfasch.github.io/jfasch-home-pages/"&gt;https://jfasch.github.io/jfasch-home-pages/&lt;/a&gt;. Bending things to
serve it as &lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt; is the topic of a &lt;a class="reference internal" href="../2020/03/custom-domain-gh-pages.html"&gt;&lt;span class="doc"&gt;companion
post&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="create-site-publication-repo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;Create “Site Publication Repo”&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;No, we do &lt;em&gt;not&lt;/em&gt; pollute our &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home"&gt;source repo&lt;/a&gt; (I refer to the local
clone as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt;) with binary content, as Github
suggests. Rather, we distinguish &lt;em&gt;content&lt;/em&gt; (which is handwritten)
from artifacts that are created during the build.&lt;/p&gt;
&lt;p&gt;This reminds me of a company I worked for many years ago:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;They had a huge pile of incomprehensible C/C++ code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They built all that in the source tree (no, not with &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;, or &lt;a class="reference external" href="https://mesonbuild.com/"&gt;Meson&lt;/a&gt;,
or &lt;a class="reference external" href="https://www.gnu.org/software/automake/"&gt;Automake&lt;/a&gt; or
anything else that can do out-of-source builds - but with another
huge pile of incomprehensible Doze &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd&lt;/span&gt;&lt;/code&gt; code.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They committed the build output. &lt;strong&gt;Yes&lt;/strong&gt;: every build they made
was a record in their version control system. The same repo that
contained the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Effect&lt;/strong&gt;: developers did not develop most of their time, but
wait for VC operations. Rational Clearcase can be blamed for many
things, but not for that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The company does not exist anymore.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;So&lt;/em&gt;, in parallel to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt; local copy of &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home"&gt;the upstream
Github repo&lt;/a&gt;, I create
another &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;Github repo&lt;/a&gt;
(cloned locally as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;). The intent is to use the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages/docs/&lt;/span&gt;&lt;/code&gt; subdirectory as a &lt;em&gt;deployment location&lt;/em&gt;
for the Sphinx-generated output from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt; - &lt;em&gt;one
commit/push per deployment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Test that, by populating &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt; with dummy HTML
content. Ah, Jekyll: we provide static files which are not source
code, technically, so we do not want Github to build our site with
Jekyll. This is what the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.nojekyll&lt;/span&gt;&lt;/code&gt; file tells them to - &lt;em&gt;suppress
build&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&amp;lt;EOF&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;docs/index.html
&lt;span class="go"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  &amp;lt;title&amp;gt;Dummy&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  &amp;lt;p&amp;gt;Hmm. Appears to work.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;EOF&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;docs/.nojekyll
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;docs/index.html&lt;span class="w"&gt; &lt;/span&gt;docs/.nojekyll
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-am&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Maybe check on the Github page that the upstream content matches what
we just created.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configure-github-pages-for-jfasch-home-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;Configure Github Pages for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Go to the upstream deployment repo on Github,
&lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;https://github.com/jfasch/jfasch-home-pages&lt;/a&gt;. Make sure you are
logged in (I made that mistake and did not find the “Settings” tab :-)
). Go to the “Settings” tab.&lt;/p&gt;
&lt;p&gt;We intend to serve content from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/&lt;/span&gt;&lt;/code&gt; - the &lt;em&gt;Publishing Source&lt;/em&gt; in
Github terminology -, so select “master branch / docs folder”. Scroll
to the “Github Pages” section, and select that constellation.&lt;/p&gt;
&lt;img alt="blog/2020/03/master-docs.png" src="blog/2020/03/master-docs.png" /&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You will not see the “Your site is published at …” message
immediately; the Github deployment machinery takes a while.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the message appears, eventually, an innocent click on the link
may lead to a 404 error. Edit the URL in the bar to explicitly
add &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.../index.html&lt;/span&gt;&lt;/code&gt;, or wait another few minutes for things to
come in order (I do not have to understand why).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="time-for-deployment"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Time for Deployment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everything is in place now,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We have a local &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/jfasch-home&lt;/span&gt;&lt;/code&gt; (say) clone (and its upstream
repository that we work from)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have an &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;upstream&lt;/a&gt;
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://github.com/jfasch/jfasch-home-pages&lt;/span&gt;&lt;/code&gt; repository; new
revisions that are pushed are automatically deployed to pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have its local &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/jfasch-home-pages&lt;/span&gt;&lt;/code&gt; clone.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets perform the deployment dance for the first time; this will be
repeated for all further deployments. (This cries for scripting, but
that’s another story.)&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Build homepage, locally, with Sphinx&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home
&lt;span class="gp"&gt;$ &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;html
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Optional) In the deployment repo, backup the &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;
file&lt;/p&gt;
&lt;p&gt;If you don’t know what this is then you probably haven’t configured
a &lt;em&gt;custom subdomain&lt;/em&gt; for your Github Pages project. See &lt;a class="reference internal" href="../2020/03/custom-domain-gh-pages.html"&gt;&lt;span class="doc"&gt;here&lt;/span&gt;&lt;/a&gt; for how that works. This
step can be added as an afterthough so lets omit it for now,
remembering that we have to preserve the &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt; file
once we add a custom domain.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;docs/CNAME&lt;span class="w"&gt; &lt;/span&gt;/tmp/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove existing site, and copy new site&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home/_build/html/&lt;span class="w"&gt; &lt;/span&gt;docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;docs/.nojekyll
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Optional) Restore &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;/tmp/CNAME&lt;span class="w"&gt; &lt;/span&gt;docs/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy (i.e. commit and push)&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--all&lt;span class="w"&gt; &lt;/span&gt;docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-am&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shiny new homepage version&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wait a while. You may nervously poll the “Settings” tab of the
upstream deployment repo if you want, until machinery is done.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="well-theres-marketing" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Well ok, if you view &lt;a class="reference external" href="https://pages.github.com"&gt;their entry page&lt;/a&gt;, all that
Marketingese sounds familiar.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/03/sphinx-gh-pages.html"/>
    <summary>Create “Site Publication Repo”</summary>
    <published>2020-03-02T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/02/fedora-kernel-build.html</id>
    <title>Patching and Building the Fedora Kernel</title>
    <updated>2020-02-27T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="patching-and-building-the-fedora-kernel"&gt;

&lt;p&gt;It’s not easy to get up to date information on how to create a custom
kernel on Fedora. There’s plenty of information out there, but most of
it is outdated and only halfway true.&lt;/p&gt;
&lt;p&gt;Here’s what I was able to find out by combining non-outdated
information into a working procedure. It goes as follows.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#why" id="id5"&gt;Why?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#find-kernel-source-git-fix-it-and-create-patch" id="id6"&gt;Find Kernel Source (Git), Fix It, and Create Patch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prepare-the-rpm-build" id="id7"&gt;Prepare the RPM Build&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#download-and-install-source-rpm-for-crashing-kernel" id="id8"&gt;Download and Install Source RPM For Crashing Kernel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#apply-the-patch" id="id9"&gt;Apply the Patch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#build-the-kernel-rpms" id="id10"&gt;Build the Kernel RPMs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#install-kernel" id="id11"&gt;Install Kernel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="why"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;Why?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tracking down a bug on my new USB-C/Thunderbolt-only laptop where an
external HDMI monitor is plugged via an adapter.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Plug external monitor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unplug external monitor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait a few seconds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watch kernel go up in flames&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="literal-block-wrapper docutils container" id="id3"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;The Oops&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: BUG: kernel NULL pointer dereference, address: 0000000000000080&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: #PF: supervisor read access in kernel mode&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: #PF: error_code(0x0000) - not-present page&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: PGD 0 P4D 0&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Oops: 0000 [#1] SMP PTI&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CPU: 0 PID: 281 Comm: kworker/0:2 Not tainted 5.4.13-201.fc31.x86_64 #1&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Hardware name: ASUSTeK COMPUTER INC. ZenBook S UX391UA/UX391UA, BIOS UX391UA.204 05/18/2018&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Workqueue: events ucsi_connector_change [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RIP: 0010:ucsi_displayport_remove_partner+0xa/0x20 [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Code: 38 00 c7 43 28 00 00 00 00 48 83 c7 10 5b e9 6d f3 3d fb 66 66 2e 0f 1f 84 00 00 00 00 00 66 90 0f 1f 44 00 00 48 85 ff 74 0f &amp;lt;48&amp;gt; 8b 47 78 48 c7 00 00 00 00 00 c6 40 3d 00 c3 66 0f 1f 44 00 00&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RSP: 0018:ffff9daa002d3df8 EFLAGS: 00010202&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RAX: 0000000000000008 RBX: ffff901f4ce35710 RCX: 0000000000003c7d&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RDX: 0000000000003c7c RSI: 0000000000000001 RDI: 0000000000000008&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RBP: 0000000000000000 R08: ffffffffbc7dbe60 R09: ffff9daa002d3cf0&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: R10: ffff901f54951a18 R11: ffff901f56a68a78 R12: ffff901f4ce35710&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: R13: 0000000000000001 R14: ffff901f4ce35860 R15: ffff901f4ce355d8&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: FS:  0000000000000000(0000) GS:ffff901f56a00000(0000) knlGS:0000000000000000&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CR2: 0000000000000080 CR3: 000000028fbbc003 CR4: 00000000003606f0&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Call Trace:&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ucsi_unregister_altmodes+0x77/0x90 [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ucsi_unregister_partner.part.0+0x13/0x30 [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ucsi_connector_change+0x247/0x340 [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  process_one_work+0x1b5/0x360&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  worker_thread+0x50/0x3c0&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  kthread+0xf9/0x130&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ? process_one_work+0x360/0x360&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ? kthread_park+0x90/0x90&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  ret_from_fork+0x35/0x40&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Modules linked in: cdc_ether usbnet r8152 mii rc_cec typec_displayport thunderbolt uinput rfcomm ccm xt_CHECKSUM xt_MASQUERADE nf_nat_tftp nf_conntrack_tftp tun bridge stp llc nf_conntrack_netbios_ns nf_conntrack_broadcast xt_CT ip6t_REJECT nf_reject_ipv6 ip6t_rpfilter ipt_REJECT nf_reject_ipv4 xt_conntrack ebtable_nat ebtable_broute ip6table_nat ip6table_mangle ip6table_raw ip6table_security iptable_nat nf_nat iptable_mangle iptable_raw iptable_security nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 libcrc32c ip_set nfnetlink ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter cmac bnep sunrpc vfat fat snd_hda_codec_hdmi snd_soc_skl snd_soc_sst_ipc snd_soc_sst_dsp snd_hda_ext_core x86_pkg_temp_thermal intel_powerclamp snd_soc_acpi_intel_match coretemp snd_soc_acpi kvm_intel snd_soc_core snd_hda_codec_realtek snd_hda_codec_generic snd_compress ledtrig_audio ac97_bus kvm snd_pcm_dmaengine iwlmvm snd_hda_intel snd_intel_dspcfg irqbypass snd_hda_codec uvcvideo mac80211&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel:  btusb iTCO_wdt btrtl crct10dif_pclmul videobuf2_vmalloc iTCO_vendor_support videobuf2_memops mei_hdcp btbcm btintel crc32_pclmul intel_rapl_msr snd_hda_core videobuf2_v4l2 libarc4 ghash_clmulni_intel videobuf2_common snd_hwdep intel_cstate bluetooth snd_seq asus_nb_wmi iwlwifi videodev snd_seq_device intel_uncore asus_wmi snd_pcm intel_rapl_perf mc cdc_acm sparse_keymap wmi_bmof ecdh_generic cfg80211 intel_wmi_thunderbolt ecc pcspkr snd_timer snd i2c_i801 soundcore joydev idma64 intel_xhci_usb_role_switch mei_me ucsi_acpi processor_thermal_device typec_ucsi intel_rapl_common mei roles intel_soc_dts_iosf intel_pch_thermal typec int3403_thermal int340x_thermal_zone int3400_thermal acpi_thermal_rel acpi_pad binfmt_misc ip_tables rfkill i915 i2c_algo_bit drm_kms_helper hid_multitouch drm nvme crc32c_intel nvme_core serio_raw wmi i2c_hid video fuse&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CR2: 0000000000000080&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: ---[ end trace 76d248e576fee192 ]---&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RIP: 0010:ucsi_displayport_remove_partner+0xa/0x20 [typec_ucsi]&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: Code: 38 00 c7 43 28 00 00 00 00 48 83 c7 10 5b e9 6d f3 3d fb 66 66 2e 0f 1f 84 00 00 00 00 00 66 90 0f 1f 44 00 00 48 85 ff 74 0f &amp;lt;48&amp;gt; 8b 47 78 48 c7 00 00 00 00 00 c6 40 3d 00 c3 66 0f 1f 44 00 00&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RSP: 0018:ffff9daa002d3df8 EFLAGS: 00010202&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RAX: 0000000000000008 RBX: ffff901f4ce35710 RCX: 0000000000003c7d&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RDX: 0000000000003c7c RSI: 0000000000000001 RDI: 0000000000000008&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RBP: 0000000000000000 R08: ffffffffbc7dbe60 R09: ffff9daa002d3cf0&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: R10: ffff901f54951a18 R11: ffff901f56a68a78 R12: ffff901f4ce35710&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: R13: 0000000000000001 R14: ffff901f4ce35860 R15: ffff901f4ce355d8&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: FS:  0000000000000000(0000) GS:ffff901f56a00000(0000) knlGS:0000000000000000&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: CR2: 0000000000000080 CR3: 000000028fbbc003 CR4: 00000000003606f0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looking at the cause, we see that the crash is a NULL pointer that is
deferenced in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ucsi_displayport_remove_partner()&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: BUG: kernel NULL pointer dereference, address: 0000000000000080&lt;/span&gt;
&lt;span class="go"&gt;... (blah) ...&lt;/span&gt;
&lt;span class="go"&gt;Feb 26 13:58:08 zen kernel: RIP: 0010:ucsi_displayport_remove_partner+0xa/0x20 [typec_ucsi]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A look at the offending source code shows that the fix must be
easy. The only pointer that is being accessed is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dp&lt;/span&gt;&lt;/code&gt;, and that
pointer is not checked for NULL-ness.&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id4"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;drivers/usb/typec/ucsi/displayport.c (taken from Linus
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="linenos"&gt; 1&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ucsi_displayport_remove_partner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;typec_altmode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="linenos"&gt; 2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="linenos"&gt; 3&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ucsi_dp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="linenos"&gt; 4&lt;/span&gt;
&lt;span class="linenos"&gt; 5&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="linenos"&gt; 6&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="linenos"&gt; 7&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="linenos"&gt; 8&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;typec_altmode_get_drvdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="linenos"&gt; 9&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class="linenos"&gt;10&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="linenos"&gt;11&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="linenos"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The fix is really easy,&lt;/p&gt;
&lt;div class="highlight-udiff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- /home/jfasch/My-Projects/jfasch-home/blog/2020/02/displayport.c.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ /home/jfasch/My-Projects/jfasch-home/blog/2020/02/displayport.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -271,6 +271,8 @@&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;		return;
&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;	dp = typec_altmode_get_drvdata(alt);
&lt;span class="gi"&gt;+    if (!dp)&lt;/span&gt;
&lt;span class="gi"&gt;+		return;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;	dp-&amp;gt;data.conf = 0;
&lt;span class="w"&gt; &lt;/span&gt;	dp-&amp;gt;data.status = 0;
&lt;span class="w"&gt; &lt;/span&gt;	dp-&amp;gt;initialized = false;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The bug is tracked as &lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1785972"&gt;Red Hat Bugzilla – Bug 1785972&lt;/a&gt;, and upstream
is already involved. John Stebbins and I provided testing, but
roundtrips are rather long. What makes things worse is that there
appear to be multiple issues, not just one.&lt;/p&gt;
&lt;p&gt;I’ll focus on mine: patch, build, report, and help with
testing. First, see how kernels are built in Fedora.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="find-kernel-source-git-fix-it-and-create-patch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Find Kernel Source (Git), Fix It, and Create Patch&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Link&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fedoraproject.org/wiki/Building_a_custom_kernel#Building_a_kernel_from_the_exploded_git_trees"&gt;Fedora Wiki: “Exploded Git Trees”&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Fedora has a Git repository at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kernel.org&lt;/span&gt;&lt;/code&gt; where they apply their
own patches on top of the vanilla kernel. Clone that, and create a
development branch. (I am on Fedora 31, so I’m basing the branch on
that.)&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git://git.kernel.org/pub/scm/linux/kernel/git/jwboyer/fedora.git
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;jfasch-fix&lt;span class="w"&gt; &lt;/span&gt;remotes/origin/f31
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Fix &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;drivers/usb/typec/ucsi/displayport.c&lt;/span&gt;&lt;/code&gt; as sketched above, and
commit.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-am&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fix RIP:ucsi_displayport_remove_partner()&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The remainder of the procedure will build the kernel RPM. A kernel RPM
build works by applying a set of patches on top of the base vanilla
kernel &lt;a class="footnote-reference brackets" href="#exploded-tree" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, so we create a patch for later use.&lt;/p&gt;
&lt;p&gt;I made only one commit for which I want to create a patch. Find out
the revision that this patch is based upon; it is one revision before
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;HEAD&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;--quiet&lt;span class="w"&gt; &lt;/span&gt;HEAD~1
&lt;span class="go"&gt;commit 4382f76bc8ef9fce5e7e96d4cdb0c073564ad249 (tag: kernel-5.5.6-201.fc31, origin/f31)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Boyer &amp;lt;jwboyer@fedoraproject.org&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Mon Feb 24 23:09:20 2020 +0000&lt;/span&gt;

&lt;span class="go"&gt;    kernel-5.5.6-201.fc31 configs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Create the patch which we will pick up later,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;format-patch&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/tmp&lt;span class="w"&gt; &lt;/span&gt;4382f76bc8ef9fce5e7e96d4cdb0c073564ad249
&lt;span class="go"&gt;/tmp/0001-fix-RIP-ucsi_displayport_remove_partner.patch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="prepare-the-rpm-build"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Prepare the RPM Build&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Link&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fedoraproject.org/wiki/Building_a_custom_kernel/Source_RPM#Prepare_Build_Files"&gt;Building a custom kernel/Source RPM&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;nav class="contents local" id="id2"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#install-prerequisites" id="id12"&gt;Install Prerequisites&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#setup-rpmbuild-directory" id="id13"&gt;Setup &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rpmbuild&lt;/span&gt;&lt;/code&gt; Directory&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="install-prerequisites"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12" role="doc-backlink"&gt;Install Prerequisites&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;rpmdevtools&lt;span class="w"&gt; &lt;/span&gt;koji
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="setup-rpmbuild-directory"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13" role="doc-backlink"&gt;Setup &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rpmbuild&lt;/span&gt;&lt;/code&gt; Directory&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Setup an empty RPM tree. This will simply create a directory
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rpmbuild&lt;/span&gt;&lt;/code&gt; skeleton tree in the home directory.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rpmdev-setuptree
&lt;span class="gp"&gt;$ &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;~/rpmbuild/
&lt;span class="go"&gt;/home/jfasch/rpmbuild/&lt;/span&gt;
&lt;span class="go"&gt;├── BUILD&lt;/span&gt;
&lt;span class="go"&gt;├── RPMS&lt;/span&gt;
&lt;span class="go"&gt;├── SOURCES&lt;/span&gt;
&lt;span class="go"&gt;├── SPECS&lt;/span&gt;
&lt;span class="go"&gt;└── SRPMS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="download-and-install-source-rpm-for-crashing-kernel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8" role="doc-backlink"&gt;Download and Install Source RPM For Crashing Kernel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Find out the version of the crashing kernel (the one that is currently
running),&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;uname&lt;span class="w"&gt; &lt;/span&gt;-r
&lt;span class="go"&gt;5.4.13-201.local.fc31.x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Download the corresponding source RPM from their build engine,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;koji&lt;span class="w"&gt; &lt;/span&gt;download-build&lt;span class="w"&gt; &lt;/span&gt;--arch&lt;span class="o"&gt;=&lt;/span&gt;src&lt;span class="w"&gt; &lt;/span&gt;kernel-5.4.13-201.fc31
&lt;span class="gp"&gt;$ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;*.rpm
&lt;span class="go"&gt;kernel-5.4.13-201.fc31.src.rpm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Install the RPM. This will fill the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/rpmbuild/&lt;/span&gt;&lt;/code&gt; skeleton with the
kenrel build instructions.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rpm&lt;span class="w"&gt; &lt;/span&gt;-ivh&lt;span class="w"&gt; &lt;/span&gt;kernel-5.4.13-201.fc31.src.rpm
&lt;span class="gp"&gt;$ &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;~/rpmbuild/
&lt;span class="go"&gt;/home/jfasch/rpmbuild/&lt;/span&gt;
&lt;span class="go"&gt;├── BUILD&lt;/span&gt;
&lt;span class="go"&gt;├── RPMS&lt;/span&gt;
&lt;span class="go"&gt;├── SOURCES&lt;/span&gt;
&lt;span class="go"&gt;│   ├── 0001-crypto-ccp-Release-all-allocated-memory-if-sha-type-.patch&lt;/span&gt;
&lt;span class="go"&gt;│   ├── 0001-Drop-that-for-now.patch&lt;/span&gt;
&lt;span class="go"&gt;... (blah) ...&lt;/span&gt;
&lt;span class="go"&gt;├── SPECS&lt;/span&gt;
&lt;span class="go"&gt;│   └── kernel.spec&lt;/span&gt;
&lt;span class="go"&gt;└── SRPMS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="apply-the-patch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9" role="doc-backlink"&gt;Apply the Patch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Copy the patch from above into the build tree, where the other patches
are,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;/tmp/0001-fix-RIP-ucsi_displayport_remove_partner.patch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;~/rpmbuild/SOURCES/RIP-ucsi_displayport_remove_partner.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Edit the build specification, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/rpmbuild/SPECS/kernel.spec&lt;/span&gt;&lt;/code&gt;, to&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;contain a descriptive version&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply the patch&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-udiff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- /home/jfasch/My-Projects/jfasch-home/blog/2020/02/kernel.spec.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ /home/jfasch/My-Projects/jfasch-home/blog/2020/02/kernel.spec&lt;/span&gt;
&lt;span class="gu"&gt;@@ -53,7 +53,7 @@&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;%global zipsed -e &amp;#39;s/\.ko$/\.ko.xz/&amp;#39;
&lt;span class="w"&gt; &lt;/span&gt;%endif
&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="gd"&gt;-# define buildid .local&lt;/span&gt;
&lt;span class="gi"&gt;+%define buildid .jfasch&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;%if 0%{?fedora}
&lt;span class="w"&gt; &lt;/span&gt;%define primary_target fedora
&lt;span class="gu"&gt;@@ -825,6 +825,7 @@&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;# ALSA code from v5.6 (Intel ASoC Sound Open Firmware driver support)
&lt;span class="w"&gt; &lt;/span&gt;Patch601: alsa-5.6.patch
&lt;span class="gi"&gt;+Patch999: RIP-ucsi_displayport_remove_partner.patch&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;# END OF PATCH DEFINITIONS
&lt;span class="w"&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="build-the-kernel-rpms"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10" role="doc-backlink"&gt;Build the Kernel RPMs&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/rpmbuild/SPECS/
&lt;span class="gp"&gt;$ &lt;/span&gt;rpmbuild&lt;span class="w"&gt; &lt;/span&gt;-bb&lt;span class="w"&gt; &lt;/span&gt;--target&lt;span class="o"&gt;=&lt;/span&gt;x86_64&lt;span class="w"&gt; &lt;/span&gt;kernel.spec
&lt;span class="go"&gt;... roedel ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Before doing this, make sure the following is available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Enough RAM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enough disk&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Patience, coffee, or something else to do&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="install-kernel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11" role="doc-backlink"&gt;Install Kernel&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rpm&lt;span class="w"&gt; &lt;/span&gt;-ivh&lt;span class="w"&gt; &lt;/span&gt;--oldpackage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;~/rpmbuild/RPMS/x86_64/kernel-core-5.4.13-201.jfasch.fc31.x86_64.rpm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;~/rpmbuild/RPMS/x86_64/kernel-modules-5.4.13-201.jfasch.fc31.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The kernel is not signed, obviously, so you might have to disable
Secure Boot in your UEFI.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="exploded-tree" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Yes, the patches are created from the Git
repository we are working with.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/02/fedora-kernel-build.html"/>
    <summary>It’s not easy to get up to date information on how to create a custom
kernel on Fedora. There’s plenty of information out there, but most of
it is outdated and only halfway true.</summary>
    <published>2020-02-27T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2012/04/Why-ps-sucks.html</id>
    <title>“Why ps Sucks” or “Counting Memory Consumption”</title>
    <updated>2012-04-03T00:00:00+02:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="why-ps-sucks-or-counting-memory-consumption"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#process-stack-management" id="id2"&gt;Process Stack Management&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#conclusion" id="id3"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#thread-pthread-stack-management" id="id4"&gt;Thread (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pthread&lt;/span&gt;&lt;/code&gt;) Stack Management&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experiment-1-100-default-threads-eating-no-stack" id="id5"&gt;Experiment #1: 100 default threads, eating no stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experiment-2-100-default-threads-eating-up-stack" id="id6"&gt;Experiment #2: 100 default threads, eating up stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experiment-3-100-threads-with-limited-stack" id="id7"&gt;Experiment #3: 100 threads with limited stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experiment-4-more-threads-than-my-system-could-take-eat-no-stack" id="id8"&gt;Experiment #4: more threads than my system could take (eat no stack)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experiment-5-more-threads-than-my-system-could-take-eat-stack" id="id9"&gt;Experiment #5: more threads than my system could take (eat stack)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#how-does-this-work" id="id10"&gt;How does this work?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id1" id="id11"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#realtime-is-different" id="id12"&gt;Realtime is different&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;Recently, I held a course on select topics around embedded Linux, at a
company in Zürich. The audience was pretty cool - they had ported
their appliance from a hardcore embedded OS to Linux a couple of years
ago. They are doing quite well nowadays. A bit too much realtime
attitude maybe (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SCHED_RR&lt;/span&gt;&lt;/code&gt; threads all over), but things appear to
work.&lt;/p&gt;
&lt;p&gt;On day 1, when we began to dive into multithreading (an inevitable
topic nowadays), an interesting question came up. “We have 70 threads
running, give each thread a stack size of 1 MB, and thus consume 70 MB
for the stacks alone. Add heap and program, and a couple of other
programs. Given a total memory of 128 MB, we’re soon dead.”&lt;/p&gt;
&lt;p&gt;“Can’t be!” was my first attempt to clear up the situation. The
attempt was rejected. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; output sure didn’t help a lot either. An
explanation of virtual memory (part of the course anyway) was the
second attempt, but still not bullet proof. More evidence
needed. Fortunately day 1 was over at this point, and I was left with
some overnight homework. During night I was able to come up with a
plausible screenplay in example form, to give a basic understanding of
how Linux does memory management. And that screenplay even backs my
instinctive “Can’t be!” defense. It’s these late night experiments
that I’m trying to share in this post.&lt;/p&gt;
&lt;section id="process-stack-management"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;Process Stack Management&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First off, lets keep out multithreading and examine the stack behavior
of a plain old process. The following program grows the stack up to a
user supplied limit. Normally stack growth is done by calling
functions on top of other functions on top of … . This is a bit
cumbersome to program when you want to grow the stack up to a given
size, so I use a handy little tricky function, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;alloca&lt;/span&gt;&lt;/code&gt;, to allocate
stack space. It does essentially the same - grow stack -, and I don’t
have to count stack addresses. Additionally, to be sure that the stack
is actually used (“dirty”), I set the allocated bytes to zero,
explicitly.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;alloca.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* stack-allocated bytes */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s stack-growth&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PID: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alloca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compile like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;process-stack&lt;span class="w"&gt; &lt;/span&gt;process-stack.c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, lets start with a small stack,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./process-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="go"&gt;PID: 24299&lt;/span&gt;
&lt;span class="go"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Examine the various size attributes of the process, using the cool
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt; option to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;24299&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;  3944   986   188   320&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ok, that’s really small. What do the columns mean? I sure don’t know -
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; is not very exact in its descriptions. Here’s my
interpretation.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VSZ&lt;/span&gt;&lt;/code&gt; is the entire “virtual size”, whatever this means, in K. We
sure can’t attribute read-only mappings of shared libraries like
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt; to the process’s memory consumption - &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glibc&lt;/span&gt;&lt;/code&gt;’s code is
shared between all processes that use it, and is resident in memory
&lt;em&gt;only once for all processes&lt;/em&gt;. Virtual memory basic usage, so to
say. The VSZ column tells us nothing about memory usage, I
presume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SZ&lt;/span&gt;&lt;/code&gt; is the size of the “core image” of the process, in
pages. Whatever that is. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; tells me something about code,
stack, data. The page size on my system is 4K, which leads me to
assume that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SZ&lt;/span&gt;&lt;/code&gt; roughly equals &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VSZ&lt;/span&gt;&lt;/code&gt;. I’m not interested in
code, so forget about this one either.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; looks promising, from what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; tells me. “Amount of
swap that would be required if the process were to dirty all
writable pages and then be swapped out”. Allocated stack is dirtied
by definition, so this appears to be a good measure of stack
consumption - at least for our little stack-eater program. I assume
that the size unit is 1K because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; is a little less than
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; (described below).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt;, “Resident set size”, in 1K units. This is the amount of
&lt;em&gt;non-swapped&lt;/em&gt; memory the process is currently using. This does
include in-core code pages as well, so this value is of limited
use. Furthermore, I consider &lt;em&gt;swapped&lt;/em&gt; memory relevant as well, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; doesn’t count that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; according to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; column, allocating 10 bytes
on the stack leads me to a program that consumes 188K of main
memory. I suspect that this is the size of a minimal program anyway,
even if it does not consume anything.&lt;/p&gt;
&lt;p&gt;Anyway, let’s proceed with our tests and eat a million bytes stack.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./process-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 24908&lt;/span&gt;
&lt;span class="go"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;24908&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;  4800  1200  1044  1376&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ok, the columns have grown within reason and reflect what we
did. Next, we become a bit greedy and want ten million bytes&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./process-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 24960&lt;/span&gt;
&lt;span class="go"&gt;Segmentation fault&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ve hit the stack size limit 8MB which places a barrier against
greedy people,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ulimit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s
&lt;span class="go"&gt;8192&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Eight million bytes is ok, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; gives no surprise.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./process-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 25018&lt;/span&gt;
&lt;span class="go"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25018&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt; 11632  2908  7876  8236&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="conclusion"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;Conclusion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The stack of a process starts small and grows on demand, magically, up
to a limit. The logic is built in to the OS, which makes sense because
it does not make sense to have a process without a stack. The
operating system takes care of extending the stack by allocating
memory under the hood, and we don’t want to bother.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="thread-pthread-stack-management"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Thread (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pthread&lt;/span&gt;&lt;/code&gt;) Stack Management&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now for thread stacks. The story is a bit different here - POSIX
threads have an attribute “stack size”. It can be explicitly set using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pthread_attr_setstacksize()&lt;/span&gt;&lt;/code&gt;, or left default which is 2MB or the
value of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RLIMIT_STACK&lt;/span&gt;&lt;/code&gt; resource limit if that is set (see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt;
&lt;span class="pre"&gt;pthread_create&lt;/span&gt;&lt;/code&gt;). A test program similar to the one above, but with
threads instead, would thus have the following parameters:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nthreads&lt;/span&gt;&lt;/code&gt;, the number of threads to create&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stack-limit&lt;/span&gt;&lt;/code&gt;, the &lt;em&gt;stack size&lt;/em&gt; attribute of each thread. We call
it “limit” and not “size” as it will turn out that it is exactly
that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stack-growth&lt;/span&gt;&lt;/code&gt;, the number of bytes to allocate on the stack. This
is done using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;alloca()&lt;/span&gt;&lt;/code&gt;, just like the process test program
does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The program creates &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nthreads&lt;/span&gt;&lt;/code&gt; threads. Each thread acts like the
process example program above - allocate stack using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;alloca()&lt;/span&gt;&lt;/code&gt; and
then shut up and sit. It looks as follows.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nthreads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* stack-allocated bytes */&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;thread_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alloca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pthread_attr_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s nthreads stack-limit stack-growth&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;nthreads&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stack_growth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PID: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pthread_attr_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pthread_attr_setstacksize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;set stack size to %ld: %s (%d)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pthread_attr_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;p_attr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;nthreads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pthread_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thread_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed after %d threads&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compile like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-pthread&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;thread-stack&lt;span class="w"&gt; &lt;/span&gt;thread-stack.c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="experiment-1-100-default-threads-eating-no-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;Experiment #1: 100 default threads, eating no stack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s create a hundred threads with default stack size, each eating
100 bytes of stack.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="go"&gt;PID: 31524&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;31524&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;825840 206460 819936 1404&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So what? &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; reports the process as consuming over 800MB of
memory. According to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt;’s description, “if it were to dirty all
writeable pages”, then this would be the amount of swap required. A
little calculation shows that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; is approximately 100 times
8MB. 8MB is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RLIMIT_STACK&lt;/span&gt;&lt;/code&gt; resource limit that is configured on
my machine (check with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ulimit&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt;), and we started 100 threads. So
it appears that the process has allocated &lt;strong&gt;800MB worth of physical
memory pages, although only 100 bytes of each stack have been eaten&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;“Can’t be!” is what I said.&lt;/p&gt;
&lt;p&gt;Of course the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; field reports much less - but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; does not
report swapped memory, so we cannot count on it very much.&lt;/p&gt;
&lt;p&gt;But anyway - let’s accept the alleged waste of memory for a moment and
carry on with the experiments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="experiment-2-100-default-threads-eating-up-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Experiment #2: 100 default threads, eating up stack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first experiment created 100 threads with default stack size 8MB,
and consumed almost nothing of the stacks. Lets eat up the stacks and
see what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; reports this time.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 771&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;771&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;825840 206460 819936 766604&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Aha. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; hasn’t changed, but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; reports much more than the
last time around. Apparently &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; does have value - at least on my
system where no swap is configured.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="experiment-3-100-threads-with-limited-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Experiment #3: 100 threads with limited stack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;See what effect a stack limit has.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="go"&gt;PID: 1026&lt;/span&gt;
&lt;span class="go"&gt;set stack size to 4096: Invalid argument (22)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ok, we cannot limit the stack to only a single page. We don’t insist
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PTHREAD_STACK_MIN&lt;/span&gt;&lt;/code&gt; is 4 pages anyway), so lets increase stack size
and see what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; tells us.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16384&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="go"&gt;PID: 1125&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1125&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;  7840  1960  1936  1404&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well. 100 minimal threads lead to a process that consumes minimal
resources. Fine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; Provided that we carefully limit our threads’ stacks,
we don’t eat up too much memory.&lt;/p&gt;
&lt;p&gt;Can’t be! Do I really have to fine-tune my stacks and risk stack
overflows and hard to find bugs?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="experiment-4-more-threads-than-my-system-could-take-eat-no-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8" role="doc-backlink"&gt;Experiment #4: more threads than my system could take (eat no stack)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now a definitive take: I have 64 bit address space, 4G of physical
RAM, and no swap configured. So, I could create no more than 512
threads with 8MB stack size each - 512*8MB == 4G. Let’s try that out
and create 513 threads. Each of the threads eats only 10 bytes of its
stack.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;513&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="go"&gt;PID: 2212&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2212&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;4210920 1052730 4205016 4576&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Works! &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; reports more &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt; than my system can take. What did
they say about &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIZE&lt;/span&gt;&lt;/code&gt;, “&lt;em&gt;if it were to dirty all writeable pages&lt;/em&gt;”?
This suggests that pages totalling 4205016 bytes have been allocated
to the process. I don’t have that many pages, so it seems like I
misunderstand. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; seems to be definitive about the size.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="experiment-5-more-threads-than-my-system-could-take-eat-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9" role="doc-backlink"&gt;Experiment #5: more threads than my system could take (eat stack)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Obviously the system permits its processes to “overcommit”
memory. Others still get their share. Nobody complained during
experiment #4, music kept playing without noticeable stutter. Now lets
actually use the stack.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;513&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 4353&lt;/span&gt;
&lt;span class="go"&gt;Killed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ok, that’s what I’d expect. Until the process was killed, the Red Hot
Chili Peppers had become overly funky (audio glitches all over), and
the Adobe Flash Plugin had crashed (Good Riddance). Less threads …&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 8462&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;vsz,sz,size,rss&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8462&lt;/span&gt;
&lt;span class="go"&gt;   VSZ    SZ  SIZE   RSS&lt;/span&gt;
&lt;span class="go"&gt;3284640 821160 3278736 3064580&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It looks like I can create a bit more than 400 threads which eat up
their 8MB stacks. Not bad, as these numbers lie well within the
physical constraints of my machine.&lt;/p&gt;
&lt;p&gt;So, when I am able to create 400 threads which eat up their 8MB
(default) stacks, then I should be able to create about 800 threads
which eat up half of their 8MB stacks, right?&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 11338&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That was ok, try 900 threads …&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4000000&lt;/span&gt;
&lt;span class="go"&gt;PID: 12156&lt;/span&gt;
&lt;span class="go"&gt;Killed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: We don’t have to fine-tune stacks!&lt;/strong&gt; Just as with the
process example, thread stacks are allocated &lt;em&gt;on demand&lt;/em&gt;, up to a
limit. A valid reason to decrease the stack size limit to a lower
value than the default is to keep it from eating up more memory than
expected. Stacks don’t shrink, so if I inadvertently - only once -
call a function that uses a 3MB automatic variable, I have a memory
leak.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="how-does-this-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10" role="doc-backlink"&gt;How does this work?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, have a look at the way the Pthread library sets up a
thread. This is best done with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strace&lt;/span&gt;&lt;/code&gt;. The system call to watch
out for is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clone()&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clone()&lt;/span&gt;&lt;/code&gt; is used to create both processes
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork()&lt;/span&gt;&lt;/code&gt; is implemented in terms of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clone()&lt;/span&gt;&lt;/code&gt;) and threads, just
with different kinds of flags.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;strace&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;./thread-stack&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The output is rather long, I have tried to keep out the noise and show
only the interesting stuff. We have told the program to create 30
threads with default stack size 8MB. Hence we see 30 blocks like this
one,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[pid 14386] clone(child_stack=0x7f5813f22ff0,&lt;/span&gt;
&lt;span class="go"&gt;          flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHA...) = 14413&lt;/span&gt;
&lt;span class="go"&gt;[pid 14386] mmap(NULL, 8392704, PROT_READ|PROT_WRITE,&lt;/span&gt;
&lt;span class="go"&gt;          MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7fd14f9af000&lt;/span&gt;
&lt;span class="go"&gt;[pid 14386] mprotect(0x7fd14f1ae000, 4096, PROT_NONE) = 0&lt;/span&gt;
&lt;span class="go"&gt;[pid 14413] pause( &amp;amp;lt;unfinished ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What we see here is,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The main thread, 14386, creates a thread 14413 using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clone()&lt;/span&gt;&lt;/code&gt;
with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CLONE_VM&lt;/span&gt;&lt;/code&gt; flag and a few other flags. The kernel creates
a new “process” which shares the parent’s address space - which is
basically the definition of a thread.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The main thread allocates the requested stack using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mmap()&lt;/span&gt;&lt;/code&gt;. This
creates a &lt;em&gt;memory mapping&lt;/em&gt; - only a placeholder for memory, to be
allocated with pages &lt;em&gt;on demand&lt;/em&gt;, as memory is accessed. The memory
is accessible in the caller’s address space at address
0x7fd14f9af000, extending for 8392704 bytes. &lt;strong&gt;Note&lt;/strong&gt; that this is
4096 bytes more than the 8MB stack size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The main thread protects 4096 bytes at the top of the stack (which
it has allocated in addition to what was requested) with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PROT_NONE&lt;/span&gt;&lt;/code&gt;. Meaning that access to this part of the mapping will
lead to a segmentation fault. This is cheap and easy stack overflow
protection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The created thread 14413 then calls &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pause()&lt;/span&gt;&lt;/code&gt;, which is what the
threads in our test program do after they have eaten their stack.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once mappings have been created, we can inspect them in the process’s
directory in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc&lt;/span&gt;&lt;/code&gt; filesystem:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/proc/14386/maps
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;7fd14f1af000-7fd14f9af000 rw-p 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;7fd14f9af000-7fd14f9b0000 ---p 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These two lines are the result of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mmap&lt;/span&gt; &lt;span class="pre"&gt;(PROT_READ|PROT_WRITE)&lt;/span&gt;&lt;/code&gt;,
followed by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mprotect&lt;/span&gt; &lt;span class="pre"&gt;(PROT_NONE)&lt;/span&gt;&lt;/code&gt; of the topmost page. The first
line is the 8MB stack which has read/write access, the second line is
the “red” stack overflow protection page, without any access bits
set. Still this doesn’t show any details of the mapping; these can be
seen from another pseudo-file in the process’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc&lt;/span&gt;&lt;/code&gt; directory. (I
can imagine that the presence of a second file with redundant
information has historical reasons.)&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/proc/14386/smaps
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;7fd14f1ae000-7fd14f1af000 ---p 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;Size:                  4 kB&lt;/span&gt;
&lt;span class="go"&gt;Rss:                   0 kB&lt;/span&gt;
&lt;span class="go"&gt;Pss:                   0 kB&lt;/span&gt;
&lt;span class="go"&gt;Shared_Clean:          0 kB&lt;/span&gt;
&lt;span class="go"&gt;Shared_Dirty:          0 kB&lt;/span&gt;
&lt;span class="go"&gt;Private_Clean:         0 kB&lt;/span&gt;
&lt;span class="go"&gt;Private_Dirty:         0 kB&lt;/span&gt;
&lt;span class="go"&gt;Referenced:            0 kB&lt;/span&gt;
&lt;span class="go"&gt;Anonymous:             0 kB&lt;/span&gt;
&lt;span class="go"&gt;AnonHugePages:         0 kB&lt;/span&gt;
&lt;span class="go"&gt;Swap:                  0 kB&lt;/span&gt;
&lt;span class="go"&gt;KernelPageSize:        4 kB&lt;/span&gt;
&lt;span class="go"&gt;MMUPageSize:           4 kB&lt;/span&gt;
&lt;span class="go"&gt;Locked:                0 kB&lt;/span&gt;
&lt;span class="go"&gt;7fd14f1af000-7fd14f9af000 rw-p 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;Size:               8192 kB&lt;/span&gt;
&lt;span class="go"&gt;Rss:                   8 kB&lt;/span&gt;
&lt;span class="go"&gt;Pss:                   8 kB&lt;/span&gt;
&lt;span class="go"&gt;Shared_Clean:          0 kB&lt;/span&gt;
&lt;span class="go"&gt;Shared_Dirty:          0 kB&lt;/span&gt;
&lt;span class="go"&gt;Private_Clean:         0 kB&lt;/span&gt;
&lt;span class="go"&gt;Private_Dirty:         8 kB&lt;/span&gt;
&lt;span class="go"&gt;Referenced:            8 kB&lt;/span&gt;
&lt;span class="go"&gt;Anonymous:             8 kB&lt;/span&gt;
&lt;span class="go"&gt;AnonHugePages:         0 kB&lt;/span&gt;
&lt;span class="go"&gt;Swap:                  0 kB&lt;/span&gt;
&lt;span class="go"&gt;KernelPageSize:        4 kB&lt;/span&gt;
&lt;span class="go"&gt;MMUPageSize:           4 kB&lt;/span&gt;
&lt;span class="go"&gt;Locked:                0 kB&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we see the same two mappings, but with additional information. It
is exactly this information that we are missing from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first mapping represents the red page. Its size is 4K. No &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt;,
no nothing else. Pretty shallow, not backed by any physical memory.&lt;/p&gt;
&lt;p&gt;The second mapping is the stack itself, with the following
information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The mapping’s extent (Size) is 8MB which is no surprise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;8K is currently resident. Again, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RSS&lt;/span&gt;&lt;/code&gt; does not help much as the
number is swamped by swap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most important information is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Private_Dirty&lt;/span&gt;&lt;/code&gt; - the number of
bytes that are “dirty” and thus have to be allocated and attributed
to the process. “Private” means that the memory is not shared with
any other process (stacks are not shared of course), and thus the
memory is attributed &lt;em&gt;only to the process&lt;/em&gt;. Here we can see that,
although the size of the mapping is 8MB, &lt;strong&gt;only 8K are actually
used&lt;/strong&gt;. As it happens the same amount is also resident, but again,
this need not be.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11" role="doc-backlink"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/jfasch/My-Projects/jfasch-home/blog/2012/04/Why-ps-sucks.rst&lt;/span&gt;, line 586); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “conclusion”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;There’s no reason to panic when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ps&lt;/span&gt;&lt;/code&gt; reports large numbers. It’s
just not easy to find out how much memory a process actually
consumes. By understanding the information the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc&lt;/span&gt;&lt;/code&gt; filesystem
provides, you at least have the chance to find out what you need.&lt;/p&gt;
&lt;p&gt;What is most important to understand is the &lt;em&gt;on demand&lt;/em&gt; nature of
memory allocation. That the &lt;em&gt;size&lt;/em&gt; of a memory mapping is definitely
meaningless, and that mappings are “filled” with memory pages as
memory is actually accessed. Stacks are actually nothing but mappings
as we saw above. The same principle applies to the heap
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc/PID/maps&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc/PID/smaps&lt;/span&gt;&lt;/code&gt; actually report a mapping
named “heap”), program code (a mapping which is shared between many
processes and which is read-only), global read-only and read-write
data (the latter is copied on-demand and only then attributed to the
modifying process). There are many other usages of memory mappings -
dig through the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/proc&lt;/span&gt;&lt;/code&gt; filesystem to find
out. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Documentation/filesystems/proc.txt&lt;/span&gt;&lt;/code&gt; from the Linux kernel
source code gives a thorough explanation of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;smaps&lt;/span&gt;&lt;/code&gt; entries, and
much more.&lt;/p&gt;
&lt;section id="realtime-is-different"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12" role="doc-backlink"&gt;Realtime is different&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;On demand&lt;/em&gt; memory allocation is counter productive in a realtime
scenario as it can delay execution substantially. To overcome this
situation, one needs to make sure memory is actually available
beforehand. No way &lt;em&gt;having to wait&lt;/em&gt; for stack memory to become
available, for example.&lt;/p&gt;
&lt;p&gt;This is what the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mlock()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mlockall()&lt;/span&gt;&lt;/code&gt; system calls are there
for - make sure that memory is available when it is needed. When
&lt;em&gt;locked into memory&lt;/em&gt;, mappings actually become populated with physical
memory. Thread stacks, for example, are physically eaten up as they
are created. Yes, realtime often brings contradictory requirements -
this is one. In such a scenario, as only one example, it does
absolutely make sense to pre-allocate limited stacks for each thread.&lt;/p&gt;
&lt;p&gt;But as always, you decide based upon what you know and, most of all,
upon your feeling. I wrote this rather lengthy post because I felt so
lucky that my feeling was right. “Can’t be!”. It cannot be that an OS
can be so stupid and eat up memory for nothing. I didn’t know 100%
sure, so I could have been wrong just as well. If you have read up to
this point at the end of kilometers of characters, then I hope you
agree with me about my conclusions. If not, please comment! One can
never be 100% sure, and I’d be glad to learn.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2012/04/Why-ps-sucks.html"/>
    <summary>Process Stack Management</summary>
    <published>2012-04-03T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2011/01/saving-solid-state-disk-life--gentoo.html</id>
    <title>Saving Solid State Disk Life (Gentoo)</title>
    <updated>2011-01-11T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="saving-solid-state-disk-life-gentoo"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rant" id="id1"&gt;Rant&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#no-swap" id="id2"&gt;No Swap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tmpfs-instances-here-and-there" id="id3"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt; instances here and there&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#syslog-var-log-messages" id="id4"&gt;Syslog, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#kernel-i-o-scheduler" id="id5"&gt;Kernel I/O Scheduler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#use-ram-for-the-kernel-build" id="id6"&gt;Use RAM for the Kernel Build&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#things-that-are-left" id="id7"&gt;Things that are left&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="rant"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1" role="doc-backlink"&gt;Rant&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Today’s mechanical disks are optimized for writing one Excel sheet a
day it seems. Holding the browser cache significantly decreases
lifetime of a disk. Developing source code and compiling entire trees
multiple times a day, plus updating a Gentoo install once a week is a
recipe to kill a disk.&lt;/p&gt;
&lt;p&gt;So I killed three (&lt;em&gt;three&lt;/em&gt;) mechanical disks last year.&lt;/p&gt;
&lt;p&gt;I pretty much depend on these disks as I don’t like moving back and
forth between the number one and the spare laptop three times in a
row. (I’m self employed, and the volume of such undertakings is
&lt;em&gt;indirectly&lt;/em&gt; proportional to the flow of money into my pocket.)&lt;/p&gt;
&lt;p&gt;Which is why I decided to purchase a solid state disk. My choice was a
Corsair Force Series 120. It has pretty good reviews on the Internet,
especially for having received a firmware overhaul that reserves less
space for the wear leveling management, thus leaving more of the space
to the user.&lt;/p&gt;
&lt;p&gt;I should have known better. Fresh firmware is not cool; it has never
been. During the Gentoo install (no, I compile to RAM now, and &lt;em&gt;not&lt;/em&gt;
to disk) there is a point where I reboot to switch away from the
Ubuntu LiveCD boot, into the fresh Gentoo system. That was the time
where the SSD has vanished - it was gone! No mention of it, nowhere.&lt;/p&gt;
&lt;p&gt;Support request on the Corsair website, sent disk to their returns
department in the Netherlands. After a few days received an email
saying it would last unusually long as they had to cope with an
unusual volume of returns. Looks like I am not alone. I bet they
themselves write those SSD reviews you find on the Internet.&lt;/p&gt;
&lt;p&gt;Anyway - after two more weeks of aggressive spare laptop harddisk
treatment I am now the proud owner of a 120G SSD with even fresher
firmware, and have set it up to a point where I can work with it. I
describe below what I did to extend its life, and what’s still to be
done. If you have recipes that target the same, please let me know.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="no-swap"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;No Swap&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have plenty of RAM (4G), and I run Linux, so there shouldn’t be any
need to swap. Unfortunately hibernating does not work without swap
(the kernel uses swap to write the state into). I configured one
partition for the purpose of hibernating, which I don’t configure in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/fstab&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I usually suspend to RAM when at home, and when I move to the living
room or board a train to Germany then I hibernate like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;sync&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;swapon&lt;span class="w"&gt; &lt;/span&gt;/dev/sda1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/sys/power/state&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;swapoff&lt;span class="w"&gt; &lt;/span&gt;/dev/sda1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="tmpfs-instances-here-and-there"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt; instances here and there&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall rule is, “You can read from a SSD as often as you want,
but don’t write to it.”. With this in mind, I immediately identify two
places where I write continuously, and which can be mitigated easily.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/tmp&lt;/span&gt;&lt;/code&gt; is used by programs to hold small amounts of temporary data
which is perfect for a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt; instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/tmp/portage&lt;/span&gt;&lt;/code&gt; is used by portage (Gentoo’s package installer)
to compile the packages before installation. I have plenty of RAM
(4G), so why not use that for compilation. See below for an
openoffice rant.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All that needs to be done is add two entries to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/fstab&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;portage-tmpfs /var/tmp/portage tmpfs rw 0 0&lt;/span&gt;
&lt;span class="go"&gt;tmp-tmpfs     /tmp             tmpfs rw 0 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You might want to set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TMPDIR=/tmp&lt;/span&gt;&lt;/code&gt; explicitly, to have GCC write
its temporary files there instead of in its current working
directory. Create a dedicated file in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/env.d&lt;/span&gt;&lt;/code&gt;, and call
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;env-update&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I could limit the space on these by writing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rw,size=500m&lt;/span&gt;&lt;/code&gt; for
example. Anyway, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt; limits its size to be half the memory as a
default, so in my case this is 2G in each instance.&lt;/p&gt;
&lt;p&gt;I hit the limit on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/tmp/portage&lt;/span&gt;&lt;/code&gt; instance really soon, when
I tried to install openoffice. That piece of crap requires 6G of disk
space for compilation! Ok, I take it I have to make an exception which
reads like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="c1"&gt;# (plug my USB throwaway 1TB disk)&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;/dev/sdc1&lt;span class="w"&gt; &lt;/span&gt;/mnt/disk
&lt;span class="gp"&gt;# &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/mnt/disk/tmp-portage
&lt;span class="gp"&gt;# &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;--bind&lt;span class="w"&gt; &lt;/span&gt;/mnt/disk/tmp-portage&lt;span class="w"&gt; &lt;/span&gt;/var/tmp/portage
&lt;span class="gp"&gt;# &lt;/span&gt;emerge&lt;span class="w"&gt; &lt;/span&gt;openoffice
&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="c1"&gt;# (wait a day or two)&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/mnt/disk/tmp-portage
&lt;span class="gp"&gt;# &lt;/span&gt;umount&lt;span class="w"&gt; &lt;/span&gt;/var/tmp/portage
&lt;span class="gp"&gt;# &lt;/span&gt;umount&lt;span class="w"&gt; &lt;/span&gt;/mnt/disk
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="syslog-var-log-messages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Syslog, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I like to watch &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt;, and in fact I have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tail&lt;/span&gt; &lt;span class="pre"&gt;-f&lt;/span&gt;
&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt; runnung in a dedicated terminal. I usually have no
interest in keeping the logfile; the last time the kernel crashed was
when I had put an offending debug message into &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;i2c-dev.c&lt;/span&gt;&lt;/code&gt; to trap a
userspace error I had made. And that was on the Beagleboard.&lt;/p&gt;
&lt;p&gt;So, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt; is another candidate for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt;. Complications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Restrict the file in size, which is best done by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logrotate&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cannot use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log&lt;/span&gt;&lt;/code&gt; as mountpoint for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt;, as there’s
more in that directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="mountpoint-for-messages"&gt;
&lt;h3&gt;Mountpoint for messages&lt;/h3&gt;
&lt;p&gt;I create a dedicated directory as a mountpoint, moving the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;messages&lt;/span&gt;&lt;/code&gt; one level deeper,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;/var/log/messages
&lt;span class="gp"&gt;# &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/var/log/messages
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mount a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmpfs&lt;/span&gt;&lt;/code&gt; there, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/fstab&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;messages-tmp  /var/log/messages tmpfs rw 0 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point you use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mount&lt;/span&gt; &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt; to immediately create the
mount. Next, tell &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;syslog-ng&lt;/span&gt;&lt;/code&gt; about it. In
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/syslog-ng/syslog-ng.conf&lt;/span&gt;&lt;/code&gt; write,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;...
&lt;span class="go"&gt;destination messages { file(&amp;quot;/var/log/messages/messages&amp;quot;); };&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="logrotate"&gt;
&lt;h3&gt;Logrotate&lt;/h3&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;emerge&lt;span class="w"&gt; &lt;/span&gt;app-admin/logrotate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Make sure &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cron&lt;/span&gt;&lt;/code&gt; is running (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rc-status|grep&lt;/span&gt; &lt;span class="pre"&gt;cron&lt;/span&gt;&lt;/code&gt;, he runs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logrotate&lt;/span&gt;&lt;/code&gt;). &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;syslog-ng&lt;/span&gt;&lt;/code&gt; already comes with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logrotate&lt;/span&gt;&lt;/code&gt; configuration file, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/logrotate.d/syslog-ng&lt;/span&gt;&lt;/code&gt;. Tune this to our needs (rotate the file when its size exceeds 20M, keeping one compressed copy).&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;/var/log/messages/messages {&lt;/span&gt;
&lt;span class="go"&gt;     compress&lt;/span&gt;
&lt;span class="go"&gt;     compresscmd /bin/bzip2&lt;/span&gt;
&lt;span class="go"&gt;     compressoptions -9&lt;/span&gt;
&lt;span class="go"&gt;     compressext .bz2&lt;/span&gt;
&lt;span class="go"&gt;     size 20M&lt;/span&gt;
&lt;span class="go"&gt;     rotate 1&lt;/span&gt;
&lt;span class="go"&gt;     missingok&lt;/span&gt;
&lt;span class="go"&gt;     sharedscripts&lt;/span&gt;
&lt;span class="go"&gt;     postrotate&lt;/span&gt;
&lt;span class="go"&gt;         /etc/init.d/syslog-ng reload &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || true&lt;/span&gt;
&lt;span class="go"&gt;     endscript&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="kernel-i-o-scheduler"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;Kernel I/O Scheduler&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The kernel uses an algorithm called an I/O scheduler to optimize disk access. It does this by collecting read and write requests at adjacent disk locations. This is not necessary with SSDs as there are no disks and no heads. I switch off the scheduler for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sda&lt;/span&gt;&lt;/code&gt; (which is the SSD), and keep the default scheduler (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cfq&lt;/span&gt;&lt;/code&gt;) for USB disks I use to plug on occasion (for example if there’s an openoffice update).&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/conf.d/local.start&lt;/span&gt;&lt;/code&gt; I write,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;noop&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/sys/block/sda/queue/scheduler
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="use-ram-for-the-kernel-build"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Use RAM for the Kernel Build&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am a big believer in out-of-source builds. The kernel build system
is also capable of it, and I use to build the kernel in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/tmp&lt;/span&gt;&lt;/code&gt; like
so.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/tmp/kernel-build
&lt;span class="gp"&gt;# &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;/boot/linux-2.6.36-gentoo-r5/.config&lt;span class="w"&gt; &lt;/span&gt;/tmp/kernel-build
&lt;span class="gp"&gt;# &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;/usr/src/linux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/kernel-build&lt;span class="w"&gt; &lt;/span&gt;oldconfig
&lt;span class="gp"&gt;# &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;/usr/src/linux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/kernel-build&lt;span class="w"&gt; &lt;/span&gt;menuconfig
&lt;span class="gp"&gt;# &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;/usr/src/linux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/kernel-build&lt;span class="w"&gt; &lt;/span&gt;all
&lt;span class="gp"&gt;# &lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Don’t forget to save away the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.config&lt;/span&gt;&lt;/code&gt; file, as it will be gone
after a reboot. I use to store it along with the kernel image in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/boot/linux-2.6.36-gentoo-r5&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="things-that-are-left"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Things that are left&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a couple of things that still need work.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Xorg appears to have a hardcoded log location; I didn’t find a
config option to have it write its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Xorg.0.log&lt;/span&gt;&lt;/code&gt; in a directory
other than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There appears to be bug in portage; it does not respect the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EMERGE_LOG_DIR&lt;/span&gt;&lt;/code&gt; variable. Otherwise, I could redirect the files
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emerge.log&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emerge-fetch.log&lt;/span&gt;&lt;/code&gt; out of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log&lt;/span&gt;&lt;/code&gt;, just
like I do with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log/messages&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The fact remains that I build my own projects on disk. I have to
solve that somehow; I am thinking of using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;aufs&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unionfs-fuse&lt;/span&gt;&lt;/code&gt; to partly persist those. Some scripting around it
maybe, to persist those parts of the build which are currently in
ram. But this is another story, maybe I’ll write about it when I
know what I want.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2011/01/saving-solid-state-disk-life--gentoo.html"/>
    <summary>Rant</summary>
    <published>2011-01-11T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2011/01/porting-to-linux-there-s-always-a-better-way.html</id>
    <title>Porting to Linux (There’s Always A Better Way)</title>
    <updated>2011-01-07T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="porting-to-linux-there-s-always-a-better-way"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;nav class="contents local" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#processes-are-threads" id="id1"&gt;Processes are Threads&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#signals-aren-t-messages" id="id2"&gt;Signals Aren’t Messages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#message-queues-aren-t-message-queues" id="id3"&gt;Message Queues aren’t Message Queues&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#semaphores-and-mutexes" id="id4"&gt;Semaphores and Mutexes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#timers" id="id5"&gt;Timers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#polling" id="id6"&gt;Polling&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#event-dispatching" id="id7"&gt;Event Dispatching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#interrupts" id="id8"&gt;Interrupts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#realtime" id="id9"&gt;Realtime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;Over the past months I met a couple of people who are relatively new
to Linux. For one, I’ve been to Germany doing courses on Linux -
naturally the audience in such a course is new to Linux. For another,
I have one and a half customers here in Austria who are mainly doing
microcontroller work and who don’t have a clue of Linux.&lt;/p&gt;
&lt;p&gt;Many of these people have code which they have written and maintained
over a long time, and which has a value. The code runs happily on bare
metal, or on a minimal OS like Segger embOS, Enea OSE, VxWorks, or
even Windows CE. No way rewriting it just because of Linux.&lt;/p&gt;
&lt;p&gt;Well, there’s no need to. It’s just not trivial to choose the right
mechanisms. Linux (and Unix in general) offers so many choices to mess
things up right from the beginning. And it’s quite likely that things
are in fact messed up, which is what I learned from the people I met.&lt;/p&gt;
&lt;p&gt;“Good Old Device Firmware” is quite limited in what it can use.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It is a statically linked blob of executable code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It operates in a single address space (there’s generally no idea
what an address space is, so there is only one).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has interrupts hammering on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there is an OS, then chances are that there are multiple
processes that are scheduled by the OS. Often processes communicate
by dumping messages into each other’s message queues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locking mechanisms. In the presence of interrupts you need to
disable them if need be. If processes are used, there are generally
semaphores available in one or more flavors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s these simple concepts where the confusion starts. For example,
in Linux/Unix a process is probably not what you want - you rather
want a thread instead. When you search for the term “message queue”
you will find &lt;em&gt;several&lt;/em&gt; mechanisms, &lt;em&gt;none of which&lt;/em&gt; are what you
want. You’ll notice sooner or later that you chose the wrong
concept, but it’s maybe too late to revert - causing your Linux port
to fail over the years. (In my opinion it’s never too late to
revert, but that’s a different kind of story.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the remainder I’ll try to give a list of recipes for porting to
Linux. I hope that it will help you speed up the porting project, by
avoiding severe mistakes right at the beginning. The list cannot be
complete - it’s just a blog post after all. But I do hope it will give
you a bigger picture than you already have, and that it provides you
with the starting points for your own research (which you will have to
do unless you want to hire me as a consultant :-).&lt;/p&gt;
&lt;section id="processes-are-threads"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1" role="doc-backlink"&gt;Processes are Threads&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the embedded OS world, you use the word “process” to refer to an
entity that is scheduled by the OS. There is no such thing as separate
address spaces and memory protection in such systems (these OS’s are
initially designed for cheap MMU-less processors).&lt;/p&gt;
&lt;p&gt;So, what people generally want is &lt;em&gt;threads&lt;/em&gt;. &lt;em&gt;Processes&lt;/em&gt; in Unix refer
to address space separation and memory protection, so don’t get misled
only by the term. The Unix way of multithreading is POSIX threads
(pthreads for short). On Linux, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;pthreads&lt;/span&gt;&lt;/code&gt; will tell you
more. Better yet, buy yourself a copy of a &lt;a class="reference external" href="http://oreilly.com/catalog/9781565921153"&gt;PThreads Programming&lt;/a&gt; book. Read that book
twice. Threading has lots of pitfalls, and it is crucial to understand
these. (I have seen people create five threads to solve a simple
data-acquisition-and-network-communication problem where they didn’t
know what a mutex was.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="signals-aren-t-messages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2" role="doc-backlink"&gt;Signals Aren’t Messages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don’t use Unix signals for communication. They have very few in common
with what’s called a &lt;em&gt;signal&lt;/em&gt; in RTOSs. (In the RTOS world, &lt;em&gt;signals&lt;/em&gt;
are often called &lt;em&gt;messages&lt;/em&gt;.)&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;References&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_signals/slides.html"&gt;&lt;span class="doc"&gt;Slide material: UNIX signals&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_signals/screenplay.html"&gt;&lt;span class="doc"&gt;Demo code: UNIX signals&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;In Unix, signals are commonly used to tear down a process (&lt;em&gt;not&lt;/em&gt; a
thread), giving it a chance to perform proper cleanup before
exit. There are other uses of signals as well, such as notification of
memory protection violation (the dreaded “segmentation fault”) and
other programming errors.&lt;/p&gt;
&lt;p&gt;The problem with signal handling is that signals arrive in a special
context which you probably know as “interrupt context” in your
OS. Consequently, your options are very limited in a signal
handler. You cannot use most of the functions that are available from
the C runtime library!&lt;/p&gt;
&lt;p&gt;If you still feel that you need to use signals, then perform the
following steps.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Think twice. Why do you need signals? There’s probably a better way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;-s&lt;/span&gt; &lt;span class="pre"&gt;7&lt;/span&gt; &lt;span class="pre"&gt;signal&lt;/span&gt;&lt;/code&gt; for more. &lt;strong&gt;Pay special attention to the
section about async-signal-safe functions&lt;/strong&gt; (note that none of the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pthread_&lt;/span&gt;&lt;/code&gt; functions appears in the list).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to defer processing from the signal handler into the regular
course of your application. For example, you can use the “self pipe”
trick (Google sure knows about it.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forget about asynchronous signal delivery and use one of the``
sigwait``, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sigwaitinfo&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sigtimedwait&lt;/span&gt;&lt;/code&gt; system calls. This
way you suspend the execution of one thread until a signal is
caught, thus turning signal handling into a &lt;em&gt;synchronous&lt;/em&gt;
approach. You’d have to dedicate an entire thread to signal handling
though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An alternative way of synchronous signal handling is to use the new
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;signalfd&lt;/span&gt;&lt;/code&gt; system call. Its semantics are the same as
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sigwaitinfo&lt;/span&gt;&lt;/code&gt;, only you use a file descriptor as an “event
source”. You can embed this file descriptor among other event
sources in an event driven application, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;select&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;poll&lt;/span&gt;&lt;/code&gt;,
or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;epoll&lt;/span&gt;&lt;/code&gt;. See below for more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="message-queues-aren-t-message-queues"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3" role="doc-backlink"&gt;Message Queues aren’t Message Queues&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;References&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_ipc/slides.html"&gt;&lt;span class="doc"&gt;Slide material: POSIX message queues&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_ipc/screenplay.html"&gt;&lt;span class="doc"&gt;Demo code: POSIX message queues&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;Chances are that the threads (err, processes) of your OS communicate
via messages queues over which messages (err, signals) are sent. A
naive Google search (“Linux message queues”) will lead you to POSIX
and System V message queues, both of which are inter process
communication (IPC) mechanisms. This is probably not what you want, as
your messages need not be transferred across different address
spaces. Intra process message queues are normally built on top of
pthread primitives. You can find a sample such implementation &lt;a class="reference external" href="http://jf-linuxtools.git.sourceforge.net/git/gitweb.cgi?p=jf-linuxtools/jf-linuxtools;a=blob;f=pthread/base/message-queue.h"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="semaphores-and-mutexes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4" role="doc-backlink"&gt;Semaphores and Mutexes&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;References&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_ipc/slides.html"&gt;&lt;span class="doc"&gt;Slide material: POSIX semaphores&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="../../trainings/material/soup/linux/sysprog/sysprog_ipc/screenplay.html"&gt;&lt;span class="doc"&gt;Demo code: POSIX semaphores&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;Many of those OSs out there have semaphores as the one and only
synchronisation mechanism. Linux has semaphores - System V and POSIX
style. Again these are probably not what you want. You are likely to
initialize your semaphores with a count of one and use it as a &lt;em&gt;binary
semaphore&lt;/em&gt;. This is what a pthread mutex is for instead.&lt;/p&gt;
&lt;p&gt;See &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;man&lt;/span&gt; &lt;span class="pre"&gt;pthread_mutex_init&lt;/span&gt;&lt;/code&gt; for more.&lt;/p&gt;
&lt;p&gt;Confusing note for those porting from Windows: A &lt;em&gt;critical section&lt;/em&gt; is
the region that is protected by a mutex, although a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CRITICAL_SECTION&lt;/span&gt;&lt;/code&gt; is the closest Windows pendant to a mutex.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="timers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5" role="doc-backlink"&gt;Timers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Timers are hard, not only on Linux.&lt;/p&gt;
&lt;p&gt;In most embedded OSs, timers expire as interrupts which are then
handled by the application. Sometimes there is the possibility to let
the OS send you a message (err, signal) on timer expiration.&lt;/p&gt;
&lt;p&gt;There are multiple APIs for timers, most of which (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setitimer&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;timer_create&lt;/span&gt;&lt;/code&gt;) require you to use signals (Unix signals this
time) - see above for the drawbacks to this approach. Unfortunately a
straightforward Google search will lead you to these APIs.&lt;/p&gt;
&lt;p&gt;An alternative is to simply defer the execution of a thread for a
specified amount of time, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nanosleep&lt;/span&gt;&lt;/code&gt;. Another alternative is
to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;timerfd_create&lt;/span&gt;&lt;/code&gt; and friends in conjunction with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;select&lt;/span&gt;&lt;/code&gt;
or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;poll&lt;/span&gt;&lt;/code&gt;, and embed timers into an event driven application. (See
below for event loops based on file descriptors. See &lt;a class="reference external" href="http://jf-linuxtools.git.sourceforge.net/git/gitweb.cgi?p=jf-linuxtools/jf-linuxtools;a=blob;f=linux-events/events/timer.h"&gt;here&lt;/a&gt;
for a sample implementation of such a thing.)&lt;/p&gt;
&lt;p&gt;You can always build your own structures around whatever timer
mechanism and emulate the behavior of your OS on Linux. This might
require quite a bit of understanding of Linux programming, though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="polling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6" role="doc-backlink"&gt;Polling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Polling for something to happen is generally the most stupid thing to
do, not only on Linux. The are cases (screwed hardware for example)
where there is no other way, but otherwise there’s always a better
way.&lt;/p&gt;
&lt;p&gt;I have seen people set a flag in one process (err, thread), and poll
for it every millisecond from another thread. I know, a millisecond is
an eternity in nowadays’ processors - but I can imagine that there are
more flags of that sort being polled for, in a moderately complex
program. After all, it’s &lt;em&gt;events&lt;/em&gt; that these flags communicate. Some
OSs have an “event flag” mechanism which tries to achieve exactly
that, albeit a bit more intelligently - for example without the need
for polling, and without losing events through race conditions.&lt;/p&gt;
&lt;p&gt;There’s a big wealth of mechanisms in Linux to communicate events. Use
message queues (see above), for example. Build your own “event flag”
mechanism by using PThreads primitives (but not before you have read
the book).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="event-dispatching"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7" role="doc-backlink"&gt;Event Dispatching&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Unix, &lt;em&gt;everything is a file&lt;/em&gt;. Entire disks are represented as
files, partitions are, network sockets are, arbitrary devices are (for
example, serial/UART lines). Regular files are, naturally. On Linux,
even timers and Unix signals can be represented as files, as I
mentioned previously. Every open file is represented as a &lt;em&gt;file
descriptor&lt;/em&gt;. File descriptors can be read from and written to, using
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;read&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;write&lt;/span&gt;&lt;/code&gt; system calls, regardless of their type.&lt;/p&gt;
&lt;p&gt;For people who are new to Unix, this may come as a surprise: you can
read from a serial line as if it were a network connection, and you
can read from a network connection as if it were a regular
file. (Anyone tried that on Windows?)&lt;/p&gt;
&lt;p&gt;This fact alone is something you can take advantage of in your porting
project.&lt;/p&gt;
&lt;p&gt;Now what has this got to do with &lt;em&gt;event dispatching&lt;/em&gt;? Consider the
following types of &lt;em&gt;events&lt;/em&gt; that regularly happen on an OS:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Network connection has data to be read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Network connection can be written to without blocking (or, “local
TCP buffer just got emptied” or so).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Same with serial IO (open &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/dev/ttyS0&lt;/span&gt;&lt;/code&gt; or so just like a regular
file), as with any kind of stream connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A timer has expired.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A signal has arrived.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An arbitrary event happened (check out the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eventfd&lt;/span&gt;&lt;/code&gt; system call;
I didn’t mention it).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even USB events are delivered via files. (It’s just a bit more
complicated because USB is a bit more complicated; there’s &lt;a class="reference external" href="http://www.libusb.org/"&gt;libusb&lt;/a&gt; there to handle this.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most drivers for hardware devices deliver the device interrupts as
events through file descriptors (you open &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/dev/blah&lt;/span&gt;&lt;/code&gt; just like a
regular file), nicely telling you “Hey, I’ve got to tell you
something!”.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a set of system calls that are used to wait for events on
&lt;em&gt;multiple&lt;/em&gt; file descriptor, namely &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;select&lt;/span&gt;&lt;/code&gt;,`` poll``, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;epoll&lt;/span&gt;&lt;/code&gt;. Note that these system call put the calling process (err,
thread) to sleep until something happens - the name &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;poll&lt;/span&gt;&lt;/code&gt; has
nothing to do with polling as we know it.&lt;/p&gt;
&lt;p&gt;So, depending on your application, you might find it relatively easy
to use either of these system calls. Build a bit of an infrastructure
around it, like registering and unregistering callbacks, and you will
be able to comfortably use these extremely exciting mechanisms. (Or
take &lt;a class="reference external" href="http://jf-linuxtools.git.sourceforge.net/git/gitweb.cgi?p=jf-linuxtools/jf-linuxtools;a=blob;f=events/dispatcher.h"&gt;my own infrastructure&lt;/a&gt;. Or
take anybody else’s, mine’s not the only - it’s just the best.)&lt;/p&gt;
&lt;p&gt;One last note: look at the desktop environment of your choice. It’s
made up of a hundred or so processes (no, not threads). Under Gnome,
which is what I use, there’s a process called`` gnome-panel``, for
example. Try out &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strace&lt;/span&gt; &lt;span class="pre"&gt;-p&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;pid&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;gnome-panel&amp;gt;;&lt;/span&gt;&lt;/code&gt;, direct the mouse
over the panel, and see what happens: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;poll&lt;/span&gt;&lt;/code&gt; all over.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="interrupts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8" role="doc-backlink"&gt;Interrupts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the primary goals of an OS is to shield you from
hardware. There a clear separation between &lt;em&gt;user space&lt;/em&gt; and &lt;em&gt;kernel
space&lt;/em&gt;. User space uses system calls to talk to the kernel. No
interrupts in user space. Basta. (Don’t even think about using
signals!)&lt;/p&gt;
&lt;p&gt;If you have hardware that nobody else has, then chances are you will
have to deal with it yourself and write a driver for it. That’s about
the only case where you’ll get in touch with interrupts and have to
learn kernel programming. But this is a completely different story,
and a different world. Definitely fun.&lt;/p&gt;
&lt;p&gt;Nevertheless, I suggest you stay away from kernel programming just
because it is fun. Debugging is much harder there. A buggy user space
program crashes, possibly leaving you with a core dump that you can
examine with a debugger (well, GDB). Everything else will remain
running. A buggy kernel crashes, leaving nothing running. This is what
&lt;em&gt;I&lt;/em&gt; call hard.&lt;/p&gt;
&lt;p&gt;On Linux, there are a couple of hardware interfaces exported to
userspace. I already mentioned &lt;a class="reference external" href="http://www.libusb.org/"&gt;userspace USB&lt;/a&gt;. There is a similar thing to implement USB
&lt;em&gt;devices&lt;/em&gt; in user space, called &lt;a class="reference external" href="http://www.linux-usb.org/gadget"&gt;GadgetFS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For others, look inside the kernel documentation, part of the kernel
source, in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Documentation/&lt;/span&gt;&lt;/code&gt; directory. (Usually, the kernel
source is installed in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/src/linux/&lt;/span&gt;&lt;/code&gt;.) Or simply ask Google.&lt;/p&gt;
&lt;p&gt;For example, check out the userspace I2C and SPI interfaces described
in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Documentation/i2c/dev-interface&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Documentation/spi/spidev&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="realtime"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9" role="doc-backlink"&gt;Realtime&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, realtime … what’s that? To put it bluntly, Linux is realtime
capable.&lt;/p&gt;
&lt;p&gt;By default, Linux schedules processes (“scheduled entities”, so to
say - threads as well as processes) &lt;em&gt;in a fair way&lt;/em&gt;. This is, everyone
gets its fair share of CPU resources. As such, there are no guarantees
given as to when a process is scheduled, and whether its deadlines are
met.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can make any process realtime-scheduled, by calling
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sched_setscheduler()&lt;/span&gt;&lt;/code&gt;. You can make threads realtime-scheduled,
selectively, by creating them with the appropriate attributes (see
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pthread_attr_setschedparam()&lt;/span&gt;&lt;/code&gt;, and read the book :-).&lt;/p&gt;
&lt;p&gt;Realtime-processes are scheduled &lt;em&gt;immediately&lt;/em&gt; when they become
runnable (unless a higher priority process is runnable as well, of
course). And by immediate I mean immediate - and that’s what &lt;em&gt;I&lt;/em&gt; call
realtime. No fairness involved anymore, definitely not nice
anymore. And therefore potentially harmful.&lt;/p&gt;
&lt;p&gt;Basically, there’s two realtime scheduling policies to choose from:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SCHED_FIFO&lt;/span&gt;&lt;/code&gt;. The process runs until it puts itself to sleep
(waiting for something to happen), or until it is interrupted by a
process which has an even higher priority.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SCHED_RR&lt;/span&gt;&lt;/code&gt;. Processes in the same priority level alternate in a
round robin manner, with very short timeslices. As with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SCHED_FIFO&lt;/span&gt;&lt;/code&gt;, they are interrupted by higher priority processes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the man pages, and read the book. No joke. Doing realtime
scheduling is crying for trouble. Even more so if code is involved
where you don’t know 100% exactly what it does. It might go into an
infinite loop, at best. At worst, it will trigger race conditions only
under certain circumstances, or bring up deadlock
situations. Naturally, this kind of errors does not show up during
in-house testing where you are able to inspect and fix them, but
rather months later, at your customer’s site.&lt;/p&gt;
&lt;p&gt;That’s it been for now. I could possibly add a couple more items to
this list, right now. Deployment comes to mind (What’s a firmware
image in Linux? Will I be minimal? Do I use &lt;a class="reference external" href="http://busybox.net/"&gt;BusyBox&lt;/a&gt; and &lt;a class="reference external" href="http://www.uclibc.org/"&gt;uClibc&lt;/a&gt;?),
build issues (Shared libraries? Static? What, how, why?). I could add
another couple more items if I you give me a minute.&lt;/p&gt;
&lt;p&gt;If you have read through this list, you’ll see what I mean: take care
to choose the right mechanisms. Don’t start coding immediately because
there’s no time left in the project. Thinking twice and investigating
will save you from spending even more time later in the project. (But
what am I telling you?)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2011/01/porting-to-linux-there-s-always-a-better-way.html"/>
    <summary>Processes are Threads</summary>
    <published>2011-01-07T00:00:00+01:00</published>
  </entry>
</feed>
