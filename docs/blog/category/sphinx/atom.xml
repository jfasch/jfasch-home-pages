<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://www.faschingbauer.me</id>
  <title>Jörg Faschingbauer - Posts in sphinx</title>
  <updated>2023-06-23T05:37:20.437570+00:00</updated>
  <link href="https://www.faschingbauer.me"/>
  <link href="https://www.faschingbauer.me/blog/category/sphinx/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.19">ABlog</generator>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/03/sphinx-gh-pages.html</id>
    <title>Deploying Sphinx Generated Documentation to Github Pages</title>
    <updated>2020-03-02T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="deploying-sphinx-generated-documentation-to-github-pages"&gt;

&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;div class="contents local topic" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#create-site-publication-repo" id="id2"&gt;Create “Site Publication Repo”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-github-pages-for-jfasch-home-pages" id="id3"&gt;Configure Github Pages for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#time-for-deployment" id="id4"&gt;Time for Deployment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, a hosting service for
static webpages, is free and easy, although run by Microsoft
&lt;a class="footnote-reference brackets" href="#well-theres-marketing" id="id1"&gt;1&lt;/a&gt;. Times are changing.&lt;/p&gt;
&lt;p&gt;It took me a while to figure out how to use the service properly,
although, retrospectively, it hasn’t been so hard. The main points
were,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Github Pages, by default, &lt;em&gt;builds&lt;/em&gt; the stuff you push using &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. I don’t use Jekyll; rather I generate my
site locally, and want to upload &lt;em&gt;generated content only&lt;/em&gt;. This is
the topic of this post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The uploaded content is then served as
&lt;a class="reference external" href="https://jfasch.github.io/jfasch-home-pages/"&gt;https://jfasch.github.io/jfasch-home-pages/&lt;/a&gt;. Bending things to
serve it as &lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt; is the topic of a &lt;a class="reference internal" href="../2020/03/custom-domain-gh-pages.html"&gt;&lt;span class="doc"&gt;companion
post&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="create-site-publication-repo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Create “Site Publication Repo”&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;No, we do &lt;em&gt;not&lt;/em&gt; pollute our &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home"&gt;source repo&lt;/a&gt; (I refer to the local
clone as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt;) with binary content, as Github
suggests. Rather, we distinguish &lt;em&gt;content&lt;/em&gt; (which is handwritten)
from artifacts that are created during the build.&lt;/p&gt;
&lt;p&gt;This reminds me of a company I worked for many years ago:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;They had a huge pile of incomprehensible C/C++ code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They built all that in the source tree (no, not with &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;, or &lt;a class="reference external" href="https://mesonbuild.com/"&gt;Meson&lt;/a&gt;,
or &lt;a class="reference external" href="https://www.gnu.org/software/automake/"&gt;Automake&lt;/a&gt; or
anything else that can do out-of-source builds - but with another
huge pile of incomprehensible Doze &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd&lt;/span&gt;&lt;/code&gt; code.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They committed the build output. &lt;strong&gt;Yes&lt;/strong&gt;: every build they made
was a record in their version control system. The same repo that
contained the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Effect&lt;/strong&gt;: developers did not develop most of their time, but
wait for VC operations. Rational Clearcase can be blamed for many
things, but not for that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The company does not exist anymore.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;So&lt;/em&gt;, in parallel to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt; local copy of &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home"&gt;the upstream
Github repo&lt;/a&gt;, I create
another &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;Github repo&lt;/a&gt;
(cloned locally as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;). The intent is to use the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages/docs/&lt;/span&gt;&lt;/code&gt; subdirectory as a &lt;em&gt;deployment location&lt;/em&gt;
for the Sphinx-generated output from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home&lt;/span&gt;&lt;/code&gt; - &lt;em&gt;one
commit/push per deployment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Test that, by populating &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt; with dummy HTML
content. Ah, Jekyll: we provide static files which are not source
code, technically, so we do not want Github to build our site with
Jekyll. This is what the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.nojekyll&lt;/span&gt;&lt;/code&gt; file tells them to - &lt;em&gt;suppress
build&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; docs/index.html
&lt;span class="go"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  &amp;lt;title&amp;gt;Dummy&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  &amp;lt;p&amp;gt;Hmm. Appears to work.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;EOF&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;touch docs/.nojekyll
&lt;span class="gp"&gt;$ &lt;/span&gt;git add docs/index.html docs/.nojekyll
&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -am &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Maybe check on the Github page that the upstream content matches what
we just created.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configure-github-pages-for-jfasch-home-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Configure Github Pages for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Go to the upstream deployment repo on Github,
&lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;https://github.com/jfasch/jfasch-home-pages&lt;/a&gt;. Make sure you are
logged in (I made that mistake and did not find the “Settings” tab :-)
). Go to the “Settings” tab.&lt;/p&gt;
&lt;p&gt;We intend to serve content from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/&lt;/span&gt;&lt;/code&gt; - the &lt;em&gt;Publishing Source&lt;/em&gt; in
Github terminology -, so select “master branch / docs folder”. Scroll
to the “Github Pages” section, and select that constellation.&lt;/p&gt;
&lt;img alt="blog/2020/03/master-docs.png" src="blog/2020/03/master-docs.png" /&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You will not see the “Your site is published at …” message
immediately; the Github deployment machinery takes a while.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the message appears, eventually, an innocent click on the link
may lead to a 404 error. Edit the URL in the bar to explicitly
add &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.../index.html&lt;/span&gt;&lt;/code&gt;, or wait another few minutes for things to
come in order (I do not have to understand why).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="time-for-deployment"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Time for Deployment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everything is in place now,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We have a local &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/jfasch-home&lt;/span&gt;&lt;/code&gt; (say) clone (and its upstream
repository that we work from)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have an &lt;a class="reference external" href="https://github.com/jfasch/jfasch-home-pages"&gt;upstream&lt;/a&gt;
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://github.com/jfasch/jfasch-home-pages&lt;/span&gt;&lt;/code&gt; repository; new
revisions that are pushed are automatically deployed to pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have its local &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/jfasch-home-pages&lt;/span&gt;&lt;/code&gt; clone.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets perform the deployment dance for the first time; this will be
repeated for all further deployments. (This cries for scripting, but
that’s another story.)&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Build homepage, locally, with Sphinx&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home
&lt;span class="gp"&gt;$ &lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Optional) In the deployment repo, backup the &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;
file&lt;/p&gt;
&lt;p&gt;If you don’t know what this is then you probably haven’t configured
a &lt;em&gt;custom subdomain&lt;/em&gt; for your Github Pages project. See &lt;a class="reference internal" href="../2020/03/custom-domain-gh-pages.html"&gt;&lt;span class="doc"&gt;here&lt;/span&gt;&lt;/a&gt; for how that works. This
step can be added as an afterthough so lets omit it for now,
remembering that we have to preserve the &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt; file
once we add a custom domain.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;cp docs/CNAME /tmp/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove existing site, and copy new site&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;git rm -r docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;cp -r &lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home/_build/html/ docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;touch docs/.nojekyll
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Optional) Restore &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cp /tmp/CNAME docs/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy (i.e. commit and push)&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git add --all docs/
&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -am &lt;span class="s1"&gt;&amp;#39;shiny new homepage version&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wait a while. You may nervously poll the “Settings” tab of the
upstream deployment repo if you want, until machinery is done.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="well-theres-marketing"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Well ok, if you view &lt;a class="reference external" href="https://pages.github.com"&gt;their entry page&lt;/a&gt;, all that
Marketingese sounds familiar.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/03/sphinx-gh-pages.html" rel="alternate"/>
    <summary>Create “Site Publication Repo”</summary>
    <published>2020-03-02T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://www.faschingbauer.me/blog/2020/03/custom-domain-gh-pages.html</id>
    <title>Adding a Custom Domain to a Github Pages Project Site</title>
    <updated>2020-03-03T00:00:00+01:00</updated>
    <author>
      <name>Jörg Faschingbauer</name>
    </author>
    <content type="html">&lt;section id="adding-a-custom-domain-to-a-github-pages-project-site"&gt;

&lt;p&gt;In the &lt;a class="reference internal" href="../2020/03/sphinx-gh-pages.html"&gt;&lt;span class="doc"&gt;previous post&lt;/span&gt;&lt;/a&gt; I pushed
generated static site content to &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, to be served as
&lt;a class="reference external" href="https://jfasch.github.io/jfasch-home-pages/"&gt;https://jfasch.github.io/jfasch-home-pages/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not being a marketing expert (the opposite is the case), I do suspect
that promoting that URL as my homepage would appear unprofessional. Rather,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I own a domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make things easy for people who have the intention of throwing
money at me, I want to have the following URLs point to the above
Github Pages site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.faschingbauer.me"&gt;http://www.faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://faschingbauer.me"&gt;http://faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://faschingbauer.me"&gt;https://faschingbauer.me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is remarkably simple nowadays. The Github Pages documentation is
a little confusing: they only talk about user and organization pages,
and &lt;em&gt;not&lt;/em&gt; about project pages. There are &lt;a class="reference external" href="https://stackoverflow.com/questions/9082499/custom-domain-for-github-project-pages"&gt;numerous posts&lt;/a&gt;
on the internet that suggest that adding a custom domain to a &lt;em&gt;project
page&lt;/em&gt; has been cumbersome in the past - these days are over,
apparently. Following is what I did.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Contents&lt;/p&gt;
&lt;div class="contents local topic" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-a-subdomain-www-faschingbauer-me" id="id1"&gt;Configure a Subdomain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure-an-apex-domain-faschingbauer-me" id="id2"&gt;Configure an Apex Domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;section id="configure-a-subdomain-www-faschingbauer-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Configure a Subdomain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;For the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch-home-pages&lt;/span&gt;&lt;/code&gt; project, configure a custom domain&lt;/p&gt;
&lt;p&gt;(Enforcing HTTPS also makes sense, while we are at it)&lt;/p&gt;
&lt;img alt="blog/2020/03/custom-domain.png" src="blog/2020/03/custom-domain.png" /&gt;
&lt;p&gt;All this does is to create a &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;docs/CNAME&lt;/span&gt;&lt;/code&gt;; pull the changes,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/jfasch-home-pages
&lt;span class="gp"&gt;$ &lt;/span&gt;git pull
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At your DNS provider, create a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CNAME&lt;/span&gt;&lt;/code&gt; DNS record for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; and set its value to point to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io&lt;/span&gt;&lt;/code&gt;. Wait a day before you publish the new site
URL - it may take some time until the changes have propagated to
other name servers. Check like so,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;dig www.faschingbauer.me

&lt;span class="go"&gt;;www.faschingbauer.me.            IN      A&lt;/span&gt;

&lt;span class="go"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="go"&gt;www.faschingbauer.me.     1100    IN      CNAME   jfasch.github.io.&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.109.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.111.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.110.153&lt;/span&gt;
&lt;span class="go"&gt;jfasch.github.io. 3600    IN      A       185.199.108.153&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Output stripped for brevity.) In the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ANSWER&lt;/span&gt; &lt;span class="pre"&gt;SECTION&lt;/span&gt;&lt;/code&gt; you can
see that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me.&lt;/span&gt;&lt;/code&gt; (the trailing dot says this is a
FQDN “Fully Qualified Domain Name”) is an alias (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CNAME&lt;/span&gt;&lt;/code&gt;) for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io.&lt;/span&gt;&lt;/code&gt;. And btw., &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jfasch.github.io.&lt;/span&gt;&lt;/code&gt; has four
addresses (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;A&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done; surf to &lt;a class="reference external" href="https://www.faschingbauer.me"&gt;https://www.faschingbauer.me&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="configure-an-apex-domain-faschingbauer-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Configure an Apex Domain, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have the subdomain &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;www.faschingbauer.me&lt;/span&gt;&lt;/code&gt; in place, pointing to
our site; now we want &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt; to go to the same
site. Github automatically, magically, apparently, redirects between
apex and subdomains. Consequentially, it is just a matter of DNS
configuration: at the DNS provider, arrange that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt;
points to one or more of Github’s static IP addresses (taken from the
output of the above &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dig&lt;/span&gt;&lt;/code&gt; command). These are,&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;185.199.108.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.109.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.110.153&lt;/span&gt;
&lt;span class="go"&gt;185.199.111.153&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the DNS provider, and arrange that the DNS &lt;em&gt;address&lt;/em&gt; (A) record
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;faschingbauer.me&lt;/span&gt;&lt;/code&gt; points to one or all of these addresses.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.faschingbauer.me/blog/2020/03/custom-domain-gh-pages.html" rel="alternate"/>
    <summary>In the previous post I pushed
generated static site content to Github Pages, to be served as
https://jfasch.github.io/jfasch-home-pages/.</summary>
    <published>2020-03-03T00:00:00+01:00</published>
  </entry>
</feed>
