Python
======

.. contents::
   :local:

.. sidebar:: *Training Information*

   **Material**

   * :doc:`/trainings/material/soup/python/group`

Day 1: Basics
-------------

Goal: gain a basic understanding of Python: variables, datatypes, some
language internals (good to know if one wants to do more).

Setup
.....

* :doc:`/trainings/material/soup/python/basics/installation`
* :doc:`/trainings/material/soup/python/misc/vscode`
* `Jupyter Notebook <https://jupyter.org/>`__ Intro

Datatypes
.........

An overview of the language, how variables are used, and which primary
datatypes there are.

* :doc:`/trainings/material/soup/python/basics/python_0110_blahblah/topic`
* :doc:`/trainings/material/soup/python/basics/python_0120_helloworld/topic`
* :doc:`/trainings/material/soup/python/basics/python_0125_running/topic`
* :doc:`/trainings/material/soup/python/basics/python_0130_syntax_etc/topic`
* :doc:`/trainings/material/soup/python/basics/python_0139_commandline_argv/topic`
* :doc:`/trainings/material/soup/python/basics/python_0140_variables/topic`
* :doc:`/trainings/material/soup/python/basics/python_0150_datatypes_overview/topic`
* :doc:`/trainings/material/soup/python/basics/python_0150_datatypes_overview_compound/topic`
* :doc:`/trainings/material/soup/python/basics/python_0160_boolean/topic`

Control Flow, Sequences, *Iteration*
....................................

Basic branching and looping. Iteration (via the ``for`` loop) is an
important topic in Python, which is why we dedicate some time to it.

* :doc:`/trainings/material/soup/python/basics/python_0170_if/topic`
* :doc:`/trainings/material/soup/python/basics/python_0193_while/topic`
* :doc:`/trainings/material/soup/python/basics/python_0220_for/topic`
* :doc:`/trainings/material/soup/python/basics/python_0225_range/topic`

More Datatypes
..............

There is more to say about datatypes than what has already been said
(there is always more to everything in Python). What's *mutable*,
va. *immutable*, and what are the consequences? How can we save
another three lines of code? What's *Pythonic*?

* :doc:`/trainings/material/soup/python/basics/python_0200_sequential_types/topic`
* :doc:`/trainings/material/soup/python/basics/python_0210_indexing_slicing/topic`
* :doc:`/trainings/material/soup/python/basics/python_0250_refs_flat_deep_copy/topic`
* :doc:`/trainings/material/soup/python/basics/python_0270_functions/topic`
* :doc:`/trainings/material/soup/python/basics/python_0300_strings/topic`
* :doc:`/trainings/material/soup/python/basics/python_0320_strings_methods/topic`
* :doc:`/trainings/material/soup/python/basics/python_0400_lists/topic`
* :doc:`/trainings/material/soup/python/basics/python_0450_dictionaries/topic`
* :doc:`/trainings/material/soup/python/basics/python_0460_sets/topic`
* :doc:`/trainings/material/soup/python/basics/python_0500_files/topic`

Day 2: Outlook Into Advanced Python
-----------------------------------

Goal: there's always more. OO isn't necessary, for example,
nonetheless Python is strongly object oriented *internally*
[#oo-aint-overengineering]_. Exception handling isn't necessary either
(one can always let exceptions pass by and terminate the
program). Knowing what *decorators* are isn't necessary either, much
like the *iterator protocol*, or *context managers*.

If you want to do more (probably with less code), you'll want to know
more; on day 2 we take a look into some topics that are optional, but
good to at least know the basics of.

OO Introduction
...............
  
* :doc:`/trainings/material/soup/python/advanced/oo/classes-and-dicts/topic`
* :doc:`/trainings/material/soup/python/advanced/oo/constructor/topic`
* :doc:`/trainings/material/soup/python/advanced/oo/methods/topic`
* :doc:`/trainings/material/soup/python/advanced/oo/str-repr/topic`

Exception Handling
..................

* :doc:`/trainings/material/soup/python/advanced/exceptions/topic`

Iteration, Generators, Comprehensions
.....................................

* :doc:`/trainings/material/soup/python/advanced/iteration-generation/topic`
* :doc:`/trainings/material/soup/python/advanced/comprehensions/topic`

Decorators, and Related Topics
..............................

* :doc:`/trainings/material/soup/python/advanced/starargs/topic`
* :doc:`/trainings/material/soup/python/advanced/closures/topic`
* :doc:`/trainings/material/soup/python/advanced/decorators/topic`

Day 3: Domain Specifics
-----------------------

That day is dedicated to solving domain specific problems:
implementing a SAP data pipeline in Python.

* `Pandas <https://pandas.pydata.org/>`__, and the ``DataFrame`` type
* `NumPy <https://numpy.org/>`__ overview
* :doc:`Unit testing
  </trainings/material/soup/python/swdev/pytest-intro>`


.. rubric:: Footnotes

.. [#oo-aint-overengineering] OO is often associated with
                              overengineering. Let's not go in that
                              direction.
