C++ für Embedded C Programmierer (30.3.2020 - 3.4.2020 Baden Württemberg) 
=========================================================================

.. toctree::
   :hidden:

   setup
   install-googletest
   vs-code
   code/exercise-string/index

Plan (sich entwickelnd)
-----------------------

.. sidebar:: *Kursinformation*

   **Beginn**

   Montag 30.3.2020, 8:00 (Martin lädt ein).

   **Vorbereitung, Übungen**

   * Bitte einen `Github <https://github.com/>`__ Account mitbringen,
     um an Übungen teilzunehmen. Diese werden in einem Private
     Repository stattfinden (Link folgt).
   * :doc:`Hier die Bauanleitung <setup>`; bitte wenn geht vorab
     ausprobieren (:doc:`Feedback </about/myself/contact>` sehr
     willkommen).

   **Schulungsbeschreibungen**

   * :doc:`C Einführung </trainings/repertoire/c>`
   * :doc:`C Advanced </trainings/repertoire/c-advanced>`
   * :doc:`C++ </trainings/repertoire/cxx>`
   * :doc:`CMake </trainings/repertoire/cmake>`

   **Folien**

   * :download:`C </trainings/material/pdf/050-c.pdf>` (PDF)
   * :download:`C++03 </trainings/material/pdf/055-c++03.pdf>` (PDF)
   * :download:`C++11 </trainings/material/pdf/056-c++11.pdf>` (PDF)
   * :download:`CMake </trainings/material/pdf/045-cmake.pdf>` (PDF)
   * :download:`Unittesting
     </trainings/material/pdf/060-design-patterns-unittests.pdf>`
     (PDF)

   **Screenplays**

   * :doc:`/trainings/material/soup/unittest-gtest-basics-screenplay`
   * :doc:`/trainings/material/soup/unittest-gtest-cmake-screenplay`
   * :doc:`/trainings/material/soup/unittest-gtest-fixture-screenplay`
   * :doc:`/trainings/material/soup/c++-class-intro-screenplay`
   * :doc:`/trainings/material/soup/c++-dynamic-memory-screenplay`
   * :doc:`/trainings/material/soup/c++-ownership-raii-screenplay`
   * :doc:`/trainings/material/soup/c++-global-initialization-screenplay`
   * :doc:`/trainings/material/soup/c++-exercises-screenplay`
   * :doc:`/trainings/material/soup/c++-smart-pointers-screenplay`
   * :doc:`/trainings/material/soup/c++-stl-container-intro-screenplay`

   **Links**

   * C++ Online Reference: `hier <http://www.cplusplus.com/>`__ oder
     `hier <https://en.cppreference.com>`__
   * `Scott Meyers: Effective Modern C++
     <https://www.oreilly.com/library/view/effective-modern-c/9781491908419/>`__
   * `Git Book <https://git-scm.com/book/en/v2>`__
     <https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows>`__.
   * `Googletest <https://github.com/google/googletest>`__, `Primer
     <https://github.com/google/googletest/blob/master/googletest/docs/primer.md>`__

   **Sonstiges**

   * :doc:`setup`
   * :doc:`install-googletest`
   * :doc:`vs-code`
   * :doc:`/blog/2020/03/ms-teams-on-linux`

Kurssaufbau
...........

`Test Driven Development bzw. Unittesting
<https://www.amazon.de/Test-Driven-Development-Example-Signature/dp/0321146530>`__
ist Teil der Kursanforderung, ergänzend zu den C++-Themen.

Lasst uns also den Kursverlauf testgetrieben entwickeln dort, wo es
Sinn macht.

* Die meisten der Livehacking Demos können als Testcases gestaltet
  werden.
* Übungen erst recht; der Trainer formuliert die Aufgabe als
  Unittest - die Teilnehmer hacken - alle diskutieren - nächste
  Iteration ...

Tag 1
.....

* :doc:`/trainings/material/soup/unittest-gtest-basics-screenplay`
* :doc:`/trainings/material/soup/unittest-gtest-cmake-screenplay`

Ein nicht unbeträchtlicher Teil des Tages wurde dafür verwendet, um
das `Google Test Framework <https://github.com/google/googletest>`__
auf Ubuntu 16.04 LTS (mit GCC5 als System-Compiler) zum Laufen zu
bekommen.

* :doc:`install-googletest`

Tag 2
.....

* Klassen (Einführung): Konstruktoren, Methoden, Referenzen, ``const``
* :doc:`/trainings/material/soup/c++-class-intro-screenplay`
* Temporäre Objekte

Tag 3
.....

* Destruktoren, Allocation, Deallokation
* :doc:`/trainings/material/soup/c++-dynamic-memory-screenplay`
* :doc:`/trainings/material/soup/c++-ownership-raii-screenplay`
* ``valgrind`` benutzen
* Copy Konstruktor, Assignment operator (:download:`C++03 (PDF)
  </trainings/material/pdf/055-c++03.pdf>`)
* :doc:`code/exercise-string/index`

Tag 4
.....

* :doc:`/trainings/material/soup/c++-smart-pointers-screenplay`
  (:download:`C++11 </trainings/material/pdf/056-c++11.pdf>` (PDF,
  50ff))
* Was ist der Effekt von ``static`` in C?
* Standard Template Library Intro: Container und Algorithmen

  * Slides :download:`C++03 (PDF)
    </trainings/material/pdf/055-c++03.pdf>`, 102ff
  * Überblick, Arten von Containern
  * Pointerarithmetik Wiederholung
  * Iteratoren, Iteration mit ``for``

* C++11 Verbesserungen gegenüber C++03

  * Slides :download:`C++03 (PDF)
    </trainings/material/pdf/056-c++11.pdf>`, 6ff
  * ``auto``
  * `Range based
    <https://en.cppreference.com/w/cpp/language/range-for>`__ ``for``

Tag 5
.....

* Templates Intro: ``class Point`` mit parametrisierbarem
  Koordinatentyp
* Vererbung: :doc:`/trainings/material/soup/c++-inheritance-virtual-code/index`
* Alternative zu Vererbung:
  :doc:`/trainings/material/soup/c++-templates-vs-interfaces-code/index`
* STL Containers

  * ``std::vector``
  * ``std::list``
  * ``std::map``
  * ``std::set``

* ``lambda``
* `"Big O" Notation
  <https://realpython.com/must-watch-pycon-talks/#6-big-o-how-code-slows-as-data-grows>`__
* Mehr zu Methoden: `overloading
  <https://www.tutorialspoint.com/cplusplus/cpp_overloading.htm>`__
* Exceptions

* LH set mit floating points fuellen, sortierte iteration. dann ein
  mit int. algorithmus point sortieren mit algo.
* alles was uebrig geblieben ist, hier rein.

  * exc
  * container, algo o2. youtube link suchen, der war gut.
  * templates. point -> int, float, was immer
  * inher, mock umrissen.
  * was steht da noch am zettel?

Der geplante Stoff der vergangenen vier Tage hat genug Entropie in
sich, um mit dem Ungesagten und Nochzusagenden den fünften Tag zu
füllen.

