.. meta::
   :description: Python basics: could be that you find yourself
                 programming useful things on day two
   :keywords: schulung, training, raspberry, programming, python,
              introduction, einf√ºhrung, datatype, dictionary, list,
              tuple, mutable, immutable, function, class, exception,
              batteries, string, encoding, file

Basic Python
============

.. sidebar::

   .. list-table::
      :align: left

      * * **Duration**
	* 2-3 days (depends on previous knowledge)
      * * **Requirements**
	* Light programming skills from another language
      * * **Target Audience**
        * * Programming noobs who wish to do more
	  * Part-time programmers; for example test engineers, or
	    devops personnel
          * Those who just want to do more, and who are not required
	    to write in a particular language
      * * **Course Material**
	* :doc:`/trainings/material/soup/python/basics/group`
      * * **See also**
	* * :doc:`advanced`
	  * :doc:`Complete Python material
            </trainings/material/soup/python/group>`
      * * **Booking**
	* training@faschingbauer.co.at

Python's strengths are ...

* It can be taught in no time (you'll find yourself writing useful
  programs on day two)
* It is powerful
* It comes with a huge toolkit (the *standard library*)

This course gives a thorough but easy introduction to Python. With the
help of many small exercises, you'll learn how to write Python
programs, get an overview of the functionaily in the standard library,
and get an idea :doc:`what else <advanced>` Python can do.

Course Contents
---------------

* **Variables and Datatypes**

  * *Numeric datatypes*: integer, floating point, boolean, ...
  * *Sequental datatypes*: list, tuple, strings, ...
  * *Indexing*, *slicing*, and more operations on sequential types
  * *Associative datatypes*: dictionary, set ...
  * *Mutable* versus *immutable*

* **Control Flow**

  * *Branching*: ``if``
  * *Loops*: ``while``
  * *Iteration* (a special loop form): ``for``

* **Functions**

  * *Definition*, and motivation
  * *Parameters*: positional parameters, named/keyword parameters,
    default parameters, ...
  * *Return values*

* **Exception Handling**

  * *The exception hierarchy*
  * *Defining custom exceptions*
  * *Raining and handling exceptions*

* **Strings**

  * *Methods*: what string can do
  * *Formatting*
  * *Encoding*

* **File-I/O**

  * *Reading, writing, and creating* files
  * *Encoding*
