.. ot-topic:: linux.basics.intro.overview

.. include:: <mmlalias.txt>


Overview
========

.. contents::
   :local:

.. image:: user-kernel.svg

User Space, Kernel Space?
-------------------------

* Clear distinction - *separation of concerns*
* User space *programs* use *services* provided by kernel - via
  *system calls*
* Programs (their programmers) use simple programming paradigms like
  *blocking* I/O |longrightarrow| transparent *waits*
* All heavy stuff is done by the kernel

User Space: *Abstractions*
--------------------------

* No direct hardware access
* Per process *linear address space*

  * |longrightarrow| perception that I *own* all memory
  * *Virtual memory* - *virtualization* of physical memory

* *Scheduling*

  * |longrightarrow| perception that I *own* the CPU
  * *virtualization* of physical CPU

* File systems

  * Raw disks are not organized hierarchically, obviously
  * *File descriptors* for open files
  * *Blocking* I/O

* Networking: *sockets* (*blocking* I/O)
* (Many more)

Kernel: Where The Heavy Stuff Is
--------------------------------

* Interrupt from hardware devices
* Raw memory - *not* organized linearly
* Multiple CPUs
* One single address space

  * |longrightarrow| heavy parallelism
  * |longrightarrow| **Hard!!**

