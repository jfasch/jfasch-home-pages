.. ot-group:: cxx11.new_language_features.attributes


.. include:: <mmlalias.txt>

.. ot-topic:: cxx11.new_language_features.attributes.attributes


Attributes
==========

.. contents::
   :local:

``[[noreturn]]``
----------------

* *Function* attribute
* Compiler can know that control flow will not return to the caller
* |longrightarrow| warnings
* |longrightarrow| optimizations

.. literalinclude:: code/noreturn.cpp
   :caption: :download:`code/noreturn.cpp`
   :language: c++

* GCC 13 does not say anything though

``[[deprecated]]``
------------------

.. literalinclude:: code/deprecated.cpp
   :caption: :download:`code/deprecated.cpp`
   :language: c++


.. .. maybe_unused jjj
.. .. nodiscard jjj

``[[nodiscard]]``: Problem
--------------------------

.. literalinclude:: code/nodiscard-problem.cpp
   :caption: :download:`code/nodiscard-problem.cpp`
   :language: c++

``[[fallthrough]]``: Problem
----------------------------

* GCC: ``-Wimplicit-fallthrough`` is highly recommended (also enabled
  by ``-Wextra``)
* Omitting ``break`` is usually a bug
* Similar functionality available from other compilers too
* (GCC?) observation: have to have a statement before falling through

.. literalinclude:: code/fallthrough-warn.cpp
   :caption: :download:`code/fallthrough-warn.cpp`
   :language: c++

* Sometimes ``break``-less ``case`` is desired
* |longrightarrow| Want to selectively disable

``[[fallthrough]]``: Usage
--------------------------

.. literalinclude:: code/fallthrough-warn-suppress.cpp
   :caption: :download:`code/fallthrough-warn-suppress.cpp`
   :language: c++

``[[nodiscard]]``: Problem
--------------------------

* Compiler does not insist that function return values are respected
* There might be warning options, but these are probably too loud (and
  unwanted in most cases)

.. literalinclude:: code/nodiscard-problem.cpp
   :caption: :download:`code/nodiscard-problem.cpp`
   :language: c++

``[[nodiscard]]``: Solution
---------------------------

* ``[[nodiscard]]``, best together with ``-Werror``
* |longrightarrow| Usage has to be fixed  

.. literalinclude:: code/nodiscard-warning.cpp
   :caption: :download:`code/nodiscard-warning.cpp`
   :language: c++

* |longrightarrow| fix it

.. literalinclude:: code/nodiscard-fix.cpp
   :caption: :download:`code/nodiscard-fix.cpp`
   :language: c++
