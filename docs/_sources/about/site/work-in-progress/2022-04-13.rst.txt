.. include:: <mmlalias.txt>


Agenda: Seminar on Clean Coding (2022-04-13)
============================================

Initial Topics
--------------

* Writing Clean Code
* Testing
* Wie plant man eigentlich eine gute Software? (Metaebene) Wie fange ich gut an?
* Compiler Warnings korrigieren

Meeting 2022-02-08
------------------

* Coding

  * Clean Code

    * TDD?
    * OO?
    * Patterns

  * Metriken?
  * SW Architekturkonzepte

  * User API (Interface, Library). OO?

* Toolchain

  * Prozessoren: Intel, ARM
  * Compiler Warnings: blah overflow
  * Compiler Optimierung

* Unit Testing, CTest, TDD

Agenda
------

Introduction: Clean Code? What is that?
.......................................

`Clean Code: A Handbook of Agile Software Craftsmanship, by
Robert C. Martin ("Uncle Bob")
<https://www.oreilly.com/library/view/clean-code-a/9780136083238/>`__

Cornerstones ...

* Software development cycle (*not (!!)*: waterfall)
* Requirements
* *Intuitive* implementation (|longrightarrow| respect from co-workers
  and oneself)
* Refactoring: removing unclean code and *not* breaking requirements
* Craftsmanship?

Intuitive Code?
...............

Object Oriented Programming
```````````````````````````

* Not necessarily a science
* Only encapsulation, not over-engineering |longrightarrow|
  discipline, maybe
* People tend to talk about objects (data) and their behavior

  * |longrightarrow| Terminology
  * |longrightarrow| Requirements
  * |longrightarrow| Why not reflect terminology in code?






Objects? Why?
-------------

* Functions operate on data, mostly
* People talk about objects, their properties and behaviour. There is
  rarely standalone behavior in human speech.
* People draw objects in the first place.

  * Enter UML


